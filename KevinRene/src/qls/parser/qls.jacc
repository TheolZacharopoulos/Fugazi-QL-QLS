%package qls.parser
%class QLSParser
%interface QLSTokens
%semantic ql.ast.QLNode

%token <QLInteger> INTEGER
%token <QLBoolean> BOOLEAN
%token <QLString> STRING
%token <QLFloat> MONEY FLOAT

%token <IntegerLiteral> INTEGERLITERAL 
%token <BooleanLiteral> BOOLEANLITERAL
%token <StringLiteral> STRINGLITERAL
%token <FloatLiteral> FLOATLITERAL
%token <FloatLiteral> MONEYLITERAL

%token WIDTH FONT FONTSIZE HEIGHT COLOR

%token <Identifier> IDENTIFIER
%token <Stylesheet> STYLESHEET 
%token <Page> PAGE 
%token <Section> SECTION 
%token <Widget> WIDGET 
%token <Question> QUESTION 
%token DEFAULT 

%token RADIO DROPDOWN SLIDER SPINBOX TEXT 
%token <Checkbox> CHECKBOX
%token  '"' ':' '.' ','
%token '(' ')' '{' '}'

%type <Literal> literal
%type <QLType> type
%type <QLSBlock> statements pages
%type <QLSStatement> statement
%type <ValueSet> values
%type <StyleRule> styleRule
%type <StyleRuleSet> styleRules
%type <WidgetType> widgetType
%type <Widget> widget
%type <Page> page

%{
import ql.ast.QLNode;
import ql.ast.QLType;
import ql.ast.type.*;
import ql.ast.expression.Identifier;

import qls.ast.*;
import qls.ast.statement.*;
import qls.ast.statement.widget.*;
import qls.ast.statement.widget.type.*;
import qls.ast.statement.styling.*;
import qls.ast.statement.styling.property.*;
import qls.ast.expression.Literal;
import qls.ast.expression.literal.*;

@SuppressWarnings("all")
%}

%%		
	stylesheet : STYLESHEET IDENTIFIER '{' pages '}' { result = new Stylesheet($2, $4); }
				;

  	pages 	: page pages  { $$ = new QLSBlock($1, $2); }
        	| page        { $$ = new QLSBlock($1); }
        	;

	page 	: PAGE IDENTIFIER '{' statements '}'  { $$ = new Page($2, $4); }
			;

	statements	: statement statements	{ $$ = new QLSBlock($1, $2); }
        		| /* empty */			{ $$ = new QLSBlock(); }
				;
				
	statement	: SECTION STRINGLITERAL '{' statements '}'  { $$ = new Section($2, $4);  }
        		| DEFAULT type widget						{ $$ = new DefaultWidget($2, $3);  }
        		| DEFAULT type '{' styleRules '}'           { $$ = new DefaultStyle($2, $4);  }
        		| QUESTION IDENTIFIER                       { $$ = new Question($2);     }
        		| QUESTION IDENTIFIER widget				{ $$ = new Question($2, $3); }
	    		;

	type	: INTEGER	{ $$ = new QLInteger(); }
			| MONEY		{ $$ = new QLFloat(); }
		 	| FLOAT		{ $$ = new QLFloat(); }
		 	| BOOLEAN	{ $$ = new QLBoolean(); }
			| STRING 	{ $$ = new QLString(); }
			;
			
	literal	: BOOLEANLITERAL
			| INTEGERLITERAL
			| FLOATLITERAL
			| MONEYLITERAL
			| STRINGLITERAL
			;
	
	widget 	: WIDGET widgetType						{ $$ = new Widget($2); }
			| '{' styleRules WIDGET widgetType '}' 	{ $$ = new Widget($2, $4); }
			;
			
	widgetType	: SPINBOX           	  { $$ = new Spinbox(); }
				| RADIO '(' values ')'    { $$ = new RadioButton($3); }
				| SLIDER '(' values ')'   { $$ = new Slider($3); }
				| DROPDOWN '(' values ')' { $$ = new Dropdown($3); }
				| TEXT                    { $$ = new TextField(); }
				| CHECKBOX                { $$ = new Checkbox(); }
				;
	
	values 	: literal ',' values	{ $$ = new ValueSet($1, $3); }
			| literal				{ $$ = new ValueSet($1);     }
			;
	
	styleRules	: styleRule styleRules	{ $$ = new StyleRuleSet($1, $2); }
				| /* empty */			{ $$ = new StyleRuleSet(); }
				;
				
  styleRule	: WIDTH		':' literal  { $$ = new Width($3); }
			| HEIGHT	':' literal  { $$ = new Height($3); }
			| FONT		':' literal  { $$ = new Font($3); }
			| FONTSIZE	':' literal  { $$ = new FontSize($3); }
			| COLOR		':' literal  { $$ = new Color($3); }
			;

%%
private QLSLexer lexer; 

private QLNode result;

public QLNode getResult() {
  return result;
}

public QLSParser(QLSLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(yyerrno<0 ? msg : yyerrmsgs[yyerrno]);
}