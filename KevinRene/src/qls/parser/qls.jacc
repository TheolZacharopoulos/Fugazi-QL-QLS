%package qls.parser
%class QLSParser
%interface QLSTokens
%semantic ql.ast.QLNode

%token <QLInteger> INTEGER
%token <QLBoolean> BOOLEAN
%token <QLString> STRING
%token <QLFloat> MONEY FLOAT

%token <IntegerLiteral> INTEGERLITERAL 
%token <BooleanLiteral> BOOLEANLITERAL
%token <StringLiteral> STRINGLITERAL
%token <FloatLiteral> FLOATLITERAL
%token <FloatLiteral> MONEYLITERAL

%token <Width> WIDTH
%token <Font> FONT
%token <FontSize> FONTSIZE
%token <Height> HEIGHT
%token <Color> COLOR

%token <Identifier> IDENTIFIER
%token <Stylesheet> STYLESHEET 
%token <Page> PAGE 
%token <Section> SECTION 
%token <Widget> WIDGET 
%token <Question> QUESTION 
%token DEFAULT 

%token RADIO DROPDOWN SLIDER SPINNER TEXT CHECKBOX
%token  '"' ':' '.' ','
%token '(' ')' '{' '}'

%type <Literal> literal
%type <QLType> type
%type <QLSBlock> statements
%type <QLSStatement> statement
%type <ValueSet> values
%type <StyleRule> styleRule
%type <StyleRuleSet> styleRules
%type <StyleProperty> styleProperty

%{
import ql.ast.QLNode;
import ql.ast.expression.Identifier;
import ql.ast.expression.Literal;
import ql.ast.expression.QLType;
import ql.ast.expression.literal.StringLiteral;
import ql.ast.expression.type.*;

import qls.ast.*;
import qls.ast.statement.*;
import qls.ast.stylerule.*;
import qls.ast.widget.*;

@SuppressWarnings("all")
%}

%%
	top : stylesheet { result = $1; }
		;
		
	stylesheet 	: STYLESHEET IDENTIFIER '{' statements '}' { $$ = new Stylesheet($2, $4); }
				;
				
	statements 	: statement statements  { $$ = new QLSBlock($1, $2); }
				| statement                   { $$ = new QLSBlock($1); }
        |                             { $$ = new QLSBlock(); }
				;
				
	statement 	: PAGE IDENTIFIER '{' statements '}'  { $$ = new Page($2, $4); }
				| SECTION STRINGLITERAL '{' statements '}'  { $$ = new Section($2, $4); }
				| QUESTION IDENTIFIER                       { $$ = new Question($2); }
				| QUESTION IDENTIFIER '{' widget '}'        { $$ = new Question($2, $4); }
				| DEFAULT type widget                       { $$ = new Default($2, $3); }
				| DEFAULT type '{' styleRules '}'           { $$ = new Default($2, $4); }
				;
	
	type 	: INTEGER	{ $$ = new QLInteger(); }
	 		| MONEY		{ $$ = new QLFloat(); }
			| FLOAT		{ $$ = new QLFloat(); }
			| BOOLEAN	{ $$ = new QLBoolean(); }
			| STRING 	{ $$ = new QLString(); }
			;
			
	literal	: BOOLEANLITERAL
			| INTEGERLITERAL
			| FLOATLITERAL
			| MONEYLITERAL
			| STRINGLITERAL
			;
	
	widget 	: WIDGET widgetType
			;
			
	widgetType	: SPINNER           { $$ = new Spinner(); }
				| RADIO '(' values ')'    { $$ = new RadioButton($3); }
				| SLIDER '(' values ')'   { $$ = new Slider($3); }
				| DROPDOWN '(' values ')' { $$ = new Dropdown($3); }
				| TEXT                    { $$ = new TextField(); }
				| CHECKBOX                { $$ = new Checkbox(); }
				;
	
	values 	: literal ',' values    { $$ = new ValueSet($1, $3); }
			| literal                   { $$ = new ValueSet($1);     }
			;
	
	styleRules	: styleRule styleRules   { $$ = new StyleRuleSet($1, $2); }
				| styleRule                    { $$ = new StyleRuleSet($1); }
				;
				
	styleRule	: styleProperty ':' literal { $$ = new StyleRule($1, $3); }
				| widget
				;
				
	styleProperty	: WIDTH
					| HEIGHT
					| FONT
					| FONTSIZE
					| COLOR
					;

%%
private QLSLexer lexer; 

private QLNode result;

public QLNode getResult() {
  return result;
}

public QLSParser(QLSLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(yyerrno<0 ? msg : yyerrmsgs[yyerrno]);
}