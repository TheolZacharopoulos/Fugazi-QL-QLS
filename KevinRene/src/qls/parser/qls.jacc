%package qls.parser
%class QLSParser
%interface QLSTokens
%semantic ql.ast.ASTNode 

%token <QLInteger> INTEGER
%token <QLBoolean> BOOLEAN
%token <QLString> STRING
%token <QLFloat> MONEY FLOAT

%token <IntegerLiteral> INTEGERLITERAL 
%token <BooleanLiteral> BOOLEANLITERAL
%token <StringLiteral> STRINGLITERAL
%token <FloatLiteral> FLOATLITERAL
%token <FloatLiteral> MONEYLITERAL

%token <Identifier> IDENTIFIER
%token STYLESHEET PAGE SECTION WIDGET QUESTION DEFAULT 
%token FONT FONTSIZE WIDTH HEIGHT COLOUR
%token RADIO DROPDOWN SLIDER SPINBOX TEXT CHECKBOX
%token  '"' ':' '.' ','
%token '(' ')' '{' '}'

%type <Expression> literal
%type <QLType> type
%type <Block> block

%{
import ql.ast.*;
import ql.ast.expression.*;
import ql.ast.expression.type.*;
import ql.ast.expression.literal.*;

@SuppressWarnings("all")
%}

%%
  top : stylesheet { result = $i; }

	stylesheet 	: STYLESHEET IDENTIFIER '{' statements '}' { $$ = new StyleSheet($2, $4); }
				;
				
	statements 	: statement statements { $$ = new Block($1, $2); }
				| statements                 { $$ = new Block($1); }
				;
				
	statement 	: PAGE IDENTIFIER '{' statements '}'
				| SECTION STRINGLITERAL '{' statements '}'
				| QUESTION IDENTIFIER
				| QUESTION IDENTIFIER '{' widget '}'
				| DEFAULT type widget
				| DEFAULT type '{' styleRules '}'
				;
	
	type	: BOOLEAN
			| INTEGER
			| FLOAT
			| MONEY
			| STRING
			;
			
	literal	: BOOLEANLITERAL
			| INTEGERLITERAL
			| FLOATLITERAL
			| MONEYLITERAL
			| STRINGLITERAL
			;
	
	widget 	: WIDGET widgetType
			;
			
	widgetType	: SPINBOX
				| RADIO '(' values ')'
				| SLIDER '(' values ')'
				| DROPDOWN '(' values ')'
				| TEXT
				| CHECKBOX
				;
	
	values 	: literal ',' values
			| literal
			;
	
	styleRules	: styleRule styleRules
				| styleRule
				;
				
	styleRule	: styleProperty ':' literal
				| widget
				;
				
	styleProperty	: WIDTH
					| HEIGHT
					| FONT
					| FONTSIZE
					| COLOUR
					;

%%
private QLSLexer lexer; 

private ASTNode result;

public ASTNode getResult() {
  return result;
}

public QLSParser(QLSLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(yyerrno<0 ? msg : yyerrmsgs[yyerrno]);
}