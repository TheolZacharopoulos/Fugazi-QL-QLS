digraph callgraph {
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.newLexer" -> "(*text/scanner.Scanner).Init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.ReadQL" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.newLexer"
  "(*sync.Pool).pin" -> "sync.runtime_procPin"
  "(*sync.Pool).pin" -> "sync/atomic.LoadUintptr"
  "(*sync.Pool).pin" -> "sync.indexLocal"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procUnpin"
  "(*sync.Mutex).Lock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).Lock" -> "sync.raceAcquire"
  "(*sync.Mutex).Lock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).Lock" -> "sync.runtime_Semacquire"
  "(*sync.Mutex).Lock" -> "sync.raceAcquire"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Mutex).Unlock" -> "sync.raceRelease"
  "(*sync.Mutex).Unlock" -> "sync/atomic.AddInt32"
  "(*sync.Mutex).Unlock" -> "sync/atomic.CompareAndSwapInt32"
  "(*sync.Mutex).Unlock" -> "sync.runtime_Semrelease"
  "(*sync.Pool).pinSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).pinSlow" -> "sync.runtime_procPin"
  "(*sync.Pool).pinSlow" -> "sync.indexLocal"
  "runtime.lock" -> "runtime.getg"
  "runtime.gothrow" -> "runtime.getg"
  "runtime.startpanic" -> "runtime.onM_signalok"
  "runtime.gothrow" -> "runtime.startpanic"
  "runtime.dopanic" -> "runtime.getg"
  "runtime.dopanic" -> "runtime.acquirem"
  "runtime.dopanic" -> "runtime.getcallerpc"
  "runtime.dopanic" -> "runtime.getcallersp"
  "runtime.dopanic" -> "runtime.onM_signalok"
  "runtime.gothrow" -> "runtime.dopanic"
  "runtime.lock" -> "runtime.gothrow"
  "runtime.lock" -> "runtime.casuintptr"
  "runtime.lock" -> "runtime.semacreate"
  "runtime.lock" -> "runtime.atomicloaduintptr"
  "runtime.lock" -> "runtime.casuintptr"
  "runtime.lock" -> "runtime.procyield"
  "runtime.lock" -> "runtime.osyield"
  "runtime.lock" -> "runtime.casuintptr"
  "runtime.lock" -> "runtime.atomicloaduintptr"
  "runtime.lock" -> "runtime.semasleep"
  "runtime.GOMAXPROCS" -> "runtime.lock"
  "runtime.unlock" -> "runtime.getg"
  "runtime.unlock" -> "runtime.atomicloaduintptr"
  "runtime.unlock" -> "runtime.casuintptr"
  "runtime.unlock" -> "runtime.casuintptr"
  "runtime.unlock" -> "runtime.semawakeup"
  "runtime.unlock" -> "runtime.gothrow"
  "runtime.GOMAXPROCS" -> "runtime.unlock"
  "runtime.semacquire" -> "runtime.getg"
  "runtime.semacquire" -> "runtime.gothrow"
  "runtime.cansemacquire" -> "runtime.atomicload"
  "runtime.cansemacquire" -> "runtime.cas"
  "runtime.semacquire" -> "runtime.cansemacquire"
  "runtime.acquireSudog" -> "runtime.gomcache"
  "runtime.acquireSudog" -> "runtime.acquirem"
  "runtime.acquireSudog" -> "runtime.releasem"
  "runtime.acquireSudog" -> "runtime.gothrow"
  "runtime.semacquire" -> "runtime.acquireSudog"
  "runtime.semacquire" -> "runtime.semroot"
  "runtime.semacquire" -> "runtime.cputicks"
  "runtime.semacquire" -> "runtime.lock"
  "runtime.semacquire" -> "runtime.xadd"
  "runtime.semacquire" -> "runtime.cansemacquire"
  "runtime.semacquire" -> "runtime.xadd"
  "runtime.semacquire" -> "runtime.unlock"
  "(*runtime.semaRoot).queue" -> "runtime.getg"
  "runtime.semacquire" -> "(*runtime.semaRoot).queue"
  "runtime.gopark" -> "runtime.acquirem"
  "runtime.gopark" -> "runtime.readgstatus"
  "runtime.gopark" -> "runtime.gothrow"
  "runtime.gopark" -> "runtime.releasem"
  "runtime.gopark" -> "runtime.mcall"
  "runtime.goparkunlock" -> "runtime.gopark"
  "runtime.semacquire" -> "runtime.goparkunlock"
  "runtime.semacquire" -> "runtime.cansemacquire"
  "runtime.blockevent" -> "runtime.atomicload64"
  "runtime.blockevent" -> "runtime.getg"
  "runtime.blockevent" -> "runtime.fastrand1"
  "runtime.callers" -> "runtime.getcallersp"
  "runtime.callers" -> "runtime.getcallerpc"
  "runtime.callers" -> "runtime.onM"
  "runtime.blockevent" -> "runtime.callers"
  "runtime.blockevent" -> "runtime.lock"
  "runtime.stkbucket" -> "runtime.sysAlloc"
  "runtime.stkbucket" -> "runtime.gothrow"
  "(*runtime.bucket).stk" -> "runtime.add"
  "runtime.stkbucket" -> "(*runtime.bucket).stk"
  "runtime.stkbucket" -> "runtime.eqslice"
  "runtime.persistentalloc" -> "runtime.gothrow"
  "runtime.persistentalloc" -> "runtime.gothrow"
  "runtime.persistentalloc" -> "runtime.sysAlloc"
  "runtime.persistentalloc" -> "runtime.lock"
  "runtime.persistentalloc" -> "runtime.roundup"
  "runtime.persistentalloc" -> "runtime.sysAlloc"
  "runtime.persistentalloc" -> "runtime.add"
  "runtime.persistentalloc" -> "runtime.unlock"
  "runtime.persistentalloc" -> "runtime.unlock"
  "runtime.persistentalloc" -> "runtime.gothrow"
  "runtime.persistentalloc" -> "runtime.add"
  "runtime.persistentalloc" -> "runtime.xadd64"
  "runtime.persistentalloc" -> "runtime.xadd64"
  "runtime.newBucket" -> "runtime.persistentalloc"
  "runtime.newBucket" -> "runtime.gothrow"
  "runtime.stkbucket" -> "runtime.newBucket"
  "runtime.stkbucket" -> "(*runtime.bucket).stk"
  "runtime.blockevent" -> "runtime.stkbucket"
  "(*runtime.bucket).bp" -> "runtime.gothrow"
  "(*runtime.bucket).bp" -> "runtime.add"
  "runtime.blockevent" -> "(*runtime.bucket).bp"
  "runtime.blockevent" -> "(*runtime.bucket).bp"
  "runtime.blockevent" -> "runtime.unlock"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.gentraceback" -> "runtime.getg"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.gentraceback" -> "runtime.gotraceback"
  "runtime.findfunc" -> "runtime.gothrow"
  "runtime.gentraceback" -> "runtime.findfunc"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.step" -> "runtime.readvarint"
  "runtime.step" -> "runtime.readvarint"
  "runtime.pcvalue" -> "runtime.step"
  "runtime.gofuncname" -> "runtime.funcname"
  "runtime.gofuncname" -> "runtime.gostringnocopy"
  "runtime.pcvalue" -> "runtime.gofuncname"
  "runtime.pcvalue" -> "runtime.step"
  "runtime.pcvalue" -> "runtime.gothrow"
  "runtime.funcspdelta" -> "runtime.pcvalue"
  "runtime.gentraceback" -> "runtime.funcspdelta"
  "runtime.gentraceback" -> "runtime.topofstack"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.gentraceback" -> "runtime.findfunc"
  "runtime.gentraceback" -> "runtime.gofuncname"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.setArgInfo" -> "runtime.gofuncname"
  "runtime.setArgInfo" -> "runtime.gofuncname"
  "runtime.setArgInfo" -> "runtime.gothrow"
  "runtime.gentraceback" -> "runtime.setArgInfo"
  "runtime.gentraceback" -> "runtime.noescape"
  "runtime.showframe" -> "runtime.getg"
  "runtime.showframe" -> "runtime.gotraceback"
  "runtime.showframe" -> "runtime.funcname"
  "runtime.showframe" -> "runtime.gostringnocopy"
  "runtime.showframe" -> "runtime.hasprefix"
  "runtime.index" -> "runtime.hasprefix"
  "runtime.contains" -> "runtime.index"
  "runtime.showframe" -> "runtime.contains"
  "runtime.showframe" -> "runtime.isExportedRuntime"
  "runtime.gentraceback" -> "runtime.showframe"
  "runtime.gentraceback" -> "runtime.gofuncname"
  "runtime.funcline1" -> "runtime.pcvalue"
  "runtime.funcline1" -> "runtime.pcvalue"
  "runtime.funcline1" -> "runtime.gostringnocopy"
  "runtime.funcline" -> "runtime.funcline1"
  "runtime.gentraceback" -> "runtime.funcline"
  "runtime.gentraceback" -> "runtime.findfunc"
  "runtime.gentraceback" -> "runtime.gothrow"
  "runtime.gcallers" -> "runtime.gentraceback"
  "runtime.blockevent" -> "runtime.gcallers"
  "runtime.semacquire" -> "runtime.blockevent"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.getg"
  "runtime.releaseSudog" -> "runtime.gothrow"
  "runtime.releaseSudog" -> "runtime.gomcache"
  "runtime.semacquire" -> "runtime.releaseSudog"
  "runtime.GOMAXPROCS" -> "runtime.semacquire"
  "runtime.GOMAXPROCS" -> "runtime.getg"
  "runtime.GOMAXPROCS" -> "runtime.onM"
  "runtime.semrelease" -> "runtime.semroot"
  "runtime.semrelease" -> "runtime.xadd"
  "runtime.semrelease" -> "runtime.atomicload"
  "runtime.semrelease" -> "runtime.lock"
  "runtime.semrelease" -> "runtime.atomicload"
  "runtime.semrelease" -> "runtime.unlock"
  "runtime.semrelease" -> "runtime.unlock"
  "runtime.semrelease" -> "runtime.xadd"
  "runtime.semrelease" -> "(*runtime.semaRoot).dequeue"
  "runtime.semrelease" -> "runtime.cputicks"
  "runtime.goready" -> "runtime.acquirem"
  "runtime.goready" -> "runtime.onM"
  "runtime.goready" -> "runtime.releasem"
  "runtime.semrelease" -> "runtime.goready"
  "runtime.GOMAXPROCS" -> "runtime.semrelease"
  "runtime.GOMAXPROCS" -> "runtime.onM"
  "(*sync.Pool).pinSlow" -> "runtime.GOMAXPROCS"
  "(*sync.Pool).pinSlow" -> "sync/atomic.StorePointer"
  "(*sync.Pool).pinSlow" -> "sync/atomic.StoreUintptr"
  "(*sync.Pool).pin" -> "(*sync.Pool).pinSlow"
  "(*sync.Pool).Get" -> "(*sync.Pool).pin"
  "(*sync.Pool).Get" -> "sync.runtime_procUnpin"
  "(*sync.Pool).Get" -> "fmt.init$1"
  "(*sync.Pool).Get" -> "fmt.init$2"
  "(*sync.Pool).Get" -> "(*sync.Mutex).Lock"
  "(*sync.Pool).Get" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).getSlow" -> "sync/atomic.LoadUintptr"
  "(*sync.Pool).getSlow" -> "sync.runtime_procPin"
  "(*sync.Pool).getSlow" -> "sync.runtime_procUnpin"
  "(*sync.Pool).getSlow" -> "sync.indexLocal"
  "(*sync.Pool).getSlow" -> "(*sync.Mutex).Lock"
  "(*sync.Pool).getSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).getSlow" -> "(*sync.Mutex).Unlock"
  "(*sync.Pool).getSlow" -> "fmt.init$1"
  "(*sync.Pool).getSlow" -> "fmt.init$2"
  "(*sync.Pool).Get" -> "(*sync.Pool).getSlow"
  "fmt.newPrinter" -> "(*sync.Pool).Get"
  "(*fmt.fmt).init" -> "(*fmt.fmt).clearflags"
  "fmt.newPrinter" -> "(*fmt.fmt).init"
  "fmt.Sprintf" -> "fmt.newPrinter"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).doPrintf" -> "(*fmt.fmt).clearflags"
  "fmt.parseArgNumber" -> "fmt.parsenum"
  "(*fmt.pp).argNumber" -> "fmt.parseArgNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "fmt.intFromArg"
  "(*fmt.pp).doPrintf" -> "fmt.parsenum"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).argNumber"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "unicode/utf8.DecodeRuneInString" -> "unicode/utf8.decodeRuneInStringInternal"
  "(*fmt.pp).doPrintf" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.buffer).WriteRune" -> "unicode/utf8.EncodeRune"
  "(*fmt.pp).add" -> "(*fmt.buffer).WriteRune"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).add"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).add"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).Write"
  "unicode/utf8.DecodeRune" -> "unicode/utf8.decodeRuneInternal"
  "unicode/utf8.RuneCount" -> "unicode/utf8.DecodeRune"
  "(*fmt.fmt).pad" -> "unicode/utf8.RuneCount"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).computePadding"
  "(*fmt.fmt).writePadding" -> "(*fmt.buffer).Write"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).pad" -> "(*fmt.buffer).Write"
  "(*fmt.fmt).pad" -> "(*fmt.fmt).writePadding"
  "(*fmt.pp).printArg" -> "(*fmt.fmt).pad"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "reflect.TypeOf" -> "reflect.toType"
  "(*fmt.pp).badVerb" -> "reflect.TypeOf"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printArg"
  "(reflect.Value).Type" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Type" -> "(*reflect.uncommonType).uncommon"
  "(*fmt.pp).badVerb" -> "(reflect.Value).Type"
  "(*fmt.pp).badVerb" -> "(*reflect.rtype).String"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).add"
  "(*fmt.pp).printValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printValue" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printArg"
  "(reflect.Value).Kind" -> "(reflect.flag).kind"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Kind"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(reflect.Value).Pointer" -> "(reflect.flag).kind"
  "(reflect.Value).pointer" -> "(*reflect.rtype).pointers"
  "(reflect.Value).Pointer" -> "(reflect.Value).pointer"
  "(reflect.Value).Pointer" -> "(reflect.Value).pointer"
  "(reflect.Value).Pointer" -> "(reflect.flag).kind"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Pointer"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).add"
  "(*fmt.pp).fmtPointer" -> "(reflect.Value).Type"
  "(*fmt.pp).fmtPointer" -> "(*reflect.rtype).String"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).add"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).add"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).Write"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).add"
  "(*fmt.fmt).integer" -> "unicode/utf8.RuneLen"
  "(*fmt.fmt).integer" -> "unicode/utf8.EncodeRune"
  "(*fmt.fmt).integer" -> "(*fmt.fmt).pad"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch32"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "strconv.IsPrint" -> "strconv.bsearch16"
  "(*fmt.fmt).integer" -> "strconv.IsPrint"
  "(*fmt.pp).fmt0x64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtPointer" -> "(*fmt.buffer).Write"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtC" -> "unicode/utf8.EncodeRune"
  "(*fmt.pp).fmtC" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtUint64" -> "(*fmt.pp).fmtC"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtUint64" -> "(*fmt.pp).fmt0x64"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "strconv.quoteWith" -> "unicode/utf8.DecodeRuneInString"
  "strconv.quoteWith" -> "strconv.IsPrint"
  "strconv.quoteWith" -> "strconv.IsPrint"
  "strconv.quoteWith" -> "unicode/utf8.EncodeRune"
  "strconv.QuoteRuneToASCII" -> "strconv.quoteWith"
  "strconv.AppendQuoteRuneToASCII" -> "strconv.QuoteRuneToASCII"
  "(*fmt.fmt).fmt_qc" -> "strconv.AppendQuoteRuneToASCII"
  "(*fmt.fmt).fmt_qc" -> "(*fmt.fmt).pad"
  "strconv.QuoteRune" -> "strconv.quoteWith"
  "strconv.AppendQuoteRune" -> "strconv.QuoteRune"
  "(*fmt.fmt).fmt_qc" -> "strconv.AppendQuoteRune"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).fmt_qc"
  "(*fmt.pp).fmtUint64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtUint64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtUnicode" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtUint64" -> "(*fmt.pp).fmtUnicode"
  "(*fmt.pp).fmtUint64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtPointer" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printValue" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printValue" -> "(reflect.Value).CanInterface"
  "reflect.makeMethodValue" -> "(*reflect.rtype).Kind"
  "reflect.makeMethodValue" -> "(reflect.Value).Type"
  "reflect.funcLayout" -> "(*reflect.rtype).Kind"
  "reflect.funcLayout" -> "(*reflect.rtype).String"
  "(*sync.RWMutex).RLock" -> "sync.raceDisable"
  "(*sync.RWMutex).RLock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).RLock" -> "sync.runtime_Semacquire"
  "(*sync.RWMutex).RLock" -> "sync.raceEnable"
  "(*sync.RWMutex).RLock" -> "sync.raceAcquire"
  "reflect.funcLayout" -> "(*sync.RWMutex).RLock"
  "reflect.funcLayout" -> "(*reflect.rtype).Kind"
  "(*sync.RWMutex).RUnlock" -> "sync.raceReleaseMerge"
  "(*sync.RWMutex).RUnlock" -> "sync.raceDisable"
  "(*sync.RWMutex).RUnlock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).RUnlock" -> "sync.raceEnable"
  "(*sync.RWMutex).RUnlock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).RUnlock" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).RUnlock" -> "sync.raceEnable"
  "reflect.funcLayout" -> "(*sync.RWMutex).RUnlock"
  "reflect.funcLayout" -> "(*sync.RWMutex).RUnlock"
  "(*sync.RWMutex).Lock" -> "sync.raceDisable"
  "(*sync.RWMutex).Lock" -> "(*sync.Mutex).Lock"
  "(*sync.RWMutex).Lock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Lock" -> "sync.runtime_Semacquire"
  "(*sync.RWMutex).Lock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Lock" -> "sync.raceEnable"
  "(*sync.RWMutex).Lock" -> "sync.raceAcquire"
  "(*sync.RWMutex).Lock" -> "sync.raceAcquire"
  "reflect.funcLayout" -> "(*sync.RWMutex).Lock"
  "(*sync.RWMutex).Unlock" -> "sync.raceRelease"
  "(*sync.RWMutex).Unlock" -> "sync.raceRelease"
  "(*sync.RWMutex).Unlock" -> "sync.raceDisable"
  "(*sync.RWMutex).Unlock" -> "sync/atomic.AddInt32"
  "(*sync.RWMutex).Unlock" -> "sync.raceEnable"
  "(*sync.RWMutex).Unlock" -> "sync.runtime_Semrelease"
  "(*sync.RWMutex).Unlock" -> "(*sync.Mutex).Unlock"
  "(*sync.RWMutex).Unlock" -> "sync.raceEnable"
  "reflect.funcLayout" -> "(*sync.RWMutex).Unlock"
  "reflect.funcLayout" -> "reflect.ifaceIndir"
  "(*reflect.gcProg).align" -> "reflect.align"
  "(*reflect.gcProg).append" -> "(*reflect.gcProg).align"
  "(*reflect.gcProg).append" -> "(*reflect.gcProg).appendWord"
  "reflect.funcLayout" -> "(*reflect.gcProg).append"
  "reflect.funcLayout" -> "(*reflect.bitVector).append2"
  "reflect.funcLayout" -> "(*reflect.rtype).pointers"
  "reflect.funcLayout" -> "(*reflect.gcProg).append"
  "reflect.funcLayout" -> "(*reflect.bitVector).append2"
  "reflect.funcLayout" -> "(*reflect.gcProg).append"
  "reflect.funcLayout" -> "(*reflect.bitVector).append2"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).align"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).pointers"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).Kind"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.rtype).Len" -> "(*reflect.rtype).Kind"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).Len"
  "(*reflect.rtype).Elem" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "(*reflect.rtype).Elem" -> "reflect.toType"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).Elem"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).common"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.rtype).NumMethod" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).NumMethod" -> "(*reflect.interfaceType).NumMethod"
  "(*reflect.rtype).NumMethod" -> "(*reflect.uncommonType).NumMethod"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).NumMethod"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendProg"
  "(*reflect.rtype).NumField" -> "(*reflect.rtype).Kind"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).NumField"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendWord"
  "(*reflect.rtype).Field" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).Field" -> "reflect.toType"
  "(*reflect.structType).Field" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).Field" -> "(*reflect.rtype).Elem"
  "(*reflect.rtype).Name" -> "(*reflect.uncommonType).Name"
  "(*reflect.structType).Field" -> "(*reflect.rtype).Name"
  "(*reflect.rtype).Field" -> "(*reflect.structType).Field"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).Field"
  "(*reflect.gcProg).appendProg" -> "(*reflect.rtype).common"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).appendProg"
  "(*reflect.gcProg).appendProg" -> "(*reflect.gcProg).align"
  "reflect.funcLayout" -> "(*reflect.gcProg).appendProg"
  "reflect.addTypeBits" -> "reflect.align"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append2"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append2"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append2"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append2"
  "reflect.addTypeBits" -> "(*reflect.bitVector).append2"
  "reflect.addTypeBits" -> "reflect.addTypeBits"
  "reflect.addTypeBits" -> "reflect.addTypeBits"
  "reflect.funcLayout" -> "reflect.addTypeBits"
  "reflect.funcLayout" -> "(*reflect.gcProg).align"
  "reflect.funcLayout" -> "(*reflect.gcProg).align"
  "reflect.funcLayout" -> "(*reflect.gcProg).appendProg"
  "reflect.funcLayout" -> "(*reflect.gcProg).align"
  "(*reflect.gcProg).finalize" -> "(*reflect.gcProg).align"
  "(*reflect.gcProg).finalize" -> "reflect.extractGCWord"
  "(*reflect.gcProg).finalize" -> "(*reflect.gcProg).appendWord"
  "reflect.funcLayout" -> "(*reflect.gcProg).finalize"
  "reflect.funcLayout" -> "(*sync.RWMutex).Unlock"
  "reflect.makeMethodValue" -> "reflect.funcLayout"
  "reflect.methodReceiver" -> "(*reflect.rtype).Kind"
  "reflect.methodReceiver" -> "(*reflect.uncommonType).uncommon"
  "reflect.makeMethodValue" -> "reflect.methodReceiver"
  "reflect.valueInterface" -> "reflect.makeMethodValue"
  "reflect.valueInterface" -> "(reflect.flag).kind"
  "(reflect.Value).NumMethod" -> "(*reflect.rtype).NumMethod"
  "reflect.valueInterface" -> "(reflect.Value).NumMethod"
  "reflect.packEface" -> "reflect.ifaceIndir"
  "reflect.packEface" -> "reflect.unsafe_New"
  "reflect.packEface" -> "reflect.memmove"
  "reflect.valueInterface" -> "reflect.packEface"
  "(reflect.Value).Interface" -> "reflect.valueInterface"
  "(*fmt.pp).printValue" -> "(reflect.Value).Interface"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).clearSpecialFlags"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).restoreSpecialFlags"
  "reflect.ValueOf" -> "reflect.escapes"
  "reflect.unpackEface" -> "(*reflect.rtype).Kind"
  "reflect.unpackEface" -> "reflect.ifaceIndir"
  "reflect.ValueOf" -> "reflect.unpackEface"
  "(*fmt.pp).catchPanic" -> "reflect.ValueOf"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).Kind"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).Write"
  "(reflect.Value).IsNil" -> "(reflect.flag).kind"
  "(reflect.Value).IsNil" -> "(reflect.flag).kind"
  "(*fmt.pp).catchPanic" -> "(reflect.Value).IsNil"
  "(*fmt.pp).catchPanic" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).Write"
  "(*fmt.pp).catchPanic" -> "(*fmt.pp).add"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).Write"
  "(*fmt.pp).catchPanic" -> "(*fmt.pp).printArg"
  "(*fmt.pp).catchPanic" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.fmt).truncate" -> "unicode/utf8.RuneCountInString"
  "(*fmt.fmt).fmt_s" -> "(*fmt.fmt).truncate"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).WriteString"
  "(*fmt.fmt).padString" -> "unicode/utf8.RuneCountInString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).computePadding"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).padString" -> "(*fmt.buffer).WriteString"
  "(*fmt.fmt).padString" -> "(*fmt.fmt).writePadding"
  "(*fmt.fmt).fmt_s" -> "(*fmt.fmt).padString"
  "(*fmt.pp).handleMethods" -> "(*fmt.fmt).fmt_s"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*fmt.pp).handleMethods" -> "(*runtime.TypeAssertionError).Error"
  "(*fmt.pp).handleMethods" -> "(runtime.errorString).Error"
  "syscall.itoa" -> "syscall.uitoa"
  "syscall.itoa" -> "syscall.uitoa"
  "(syscall.Errno).Error" -> "syscall.itoa"
  "(*fmt.pp).handleMethods" -> "(syscall.Errno).Error"
  "(*fmt.pp).handleMethods" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.ComputedQuestion).String"
  "(*os.PathError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*os.PathError).Error" -> "(runtime.errorString).Error"
  "(*os.PathError).Error" -> "(syscall.Errno).Error"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*time.ParseError).Error" -> "time.quote"
  "(*os.PathError).Error" -> "(*time.ParseError).Error"
  "(*os.PathError).Error" -> "(*os.PathError).Error"
  "(*os.PathError).Error" -> "(*errors.errorString).Error"
  "(*os.SyscallError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*os.SyscallError).Error" -> "(runtime.errorString).Error"
  "(*os.SyscallError).Error" -> "(syscall.Errno).Error"
  "(*os.SyscallError).Error" -> "(*time.ParseError).Error"
  "(*os.SyscallError).Error" -> "(*os.PathError).Error"
  "(*os.SyscallError).Error" -> "(*errors.errorString).Error"
  "(*os.SyscallError).Error" -> "(*os.SyscallError).Error"
  "strconv.FormatInt" -> "strconv.formatBits"
  "strconv.Itoa" -> "strconv.FormatInt"
  "(reflect.Kind).String" -> "strconv.Itoa"
  "(*reflect.ValueError).Error" -> "(reflect.Kind).String"
  "(*os.SyscallError).Error" -> "(*reflect.ValueError).Error"
  "strconv.Quote" -> "strconv.quoteWith"
  "(*strconv.NumError).Error" -> "strconv.Quote"
  "(*strconv.NumError).Error" -> "(*runtime.TypeAssertionError).Error"
  "(*strconv.NumError).Error" -> "(runtime.errorString).Error"
  "(*strconv.NumError).Error" -> "(syscall.Errno).Error"
  "(*strconv.NumError).Error" -> "(*time.ParseError).Error"
  "(*strconv.NumError).Error" -> "(*os.PathError).Error"
  "(*strconv.NumError).Error" -> "(*errors.errorString).Error"
  "(*strconv.NumError).Error" -> "(*os.SyscallError).Error"
  "(*strconv.NumError).Error" -> "(*reflect.ValueError).Error"
  "(*strconv.NumError).Error" -> "(*strconv.NumError).Error"
  "(*os.SyscallError).Error" -> "(*strconv.NumError).Error"
  "(*os.PathError).Error" -> "(*os.SyscallError).Error"
  "(*os.PathError).Error" -> "(*reflect.ValueError).Error"
  "(*os.PathError).Error" -> "(*strconv.NumError).Error"
  "(*fmt.pp).handleMethods" -> "(*os.PathError).Error"
  "(*fmt.pp).handleMethods" -> "(*errors.errorString).Error"
  "(*fmt.pp).handleMethods" -> "(*os.SyscallError).Error"
  "(*fmt.pp).handleMethods" -> "(*reflect.ValueError).Error"
  "(*fmt.pp).handleMethods" -> "(*strconv.NumError).Error"
  "(*fmt.pp).handleMethods" -> "(*time.ParseError).Error"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).printArg"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).catchPanic"
  "(*sync.Once).Do" -> "sync/atomic.LoadUint32"
  "(*sync.Once).Do" -> "(*sync.Mutex).Lock"
  "(*sync.Once).Do" -> "(*sync.Mutex).Unlock"
  "(*sync.Once).Do" -> "sync/atomic.StoreUint32"
  "(*sync.Once).Do" -> "runtime.removeFinalizer_m"
  "(*sync.Once).Do" -> "runtime.setFinalizer_m"
  "runtime.sigpanic" -> "runtime.getg"
  "runtime.sigpanic" -> "runtime.canpanic"
  "runtime.sigpanic" -> "runtime.gothrow"
  "runtime.sigpanic" -> "runtime.signame"
  "runtime.sigpanic" -> "runtime.gostringnocopy"
  "runtime.sigpanic" -> "runtime.panicmem"
  "runtime.sigpanic" -> "runtime.gothrow"
  "runtime.sigpanic" -> "runtime.panicmem"
  "runtime.sigpanic" -> "runtime.gothrow"
  "runtime.sigpanic" -> "runtime.panicfloat"
  "runtime.sigpanic" -> "runtime.panicdivide"
  "runtime.sigpanic" -> "runtime.panicoverflow"
  "(*sync.Once).Do" -> "runtime.sigpanic"
  "sync.poolCleanup" -> "sync.indexLocal"
  "(*sync.Once).Do" -> "sync.poolCleanup"
  "syscall.Getenv" -> "(*sync.Once).Do"
  "syscall.Getenv" -> "(*sync.RWMutex).RLock"
  "syscall.Getenv" -> "(*sync.RWMutex).RUnlock"
  "time.initLocal" -> "syscall.Getenv"
  "syscall.BytePtrFromString" -> "syscall.ByteSliceFromString"
  "syscall.Open" -> "syscall.BytePtrFromString"
  "syscall.Open" -> "syscall.Syscall"
  "syscall.Open" -> "syscall.use"
  "time.open" -> "syscall.Open"
  "time.loadZoneZip" -> "time.open"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "(*time.data).big4" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).big4"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).big4"
  "(*time.data).byte" -> "(*time.data).read"
  "time.loadZoneData" -> "(*time.data).byte"
  "time.loadZoneData" -> "(*time.data).byte"
  "time.loadZoneData" -> "time.byteString"
  "time.loadZoneData" -> "(*time.data).big4"
  "time.loadZoneData" -> "time.now"
  "time.loadZoneZip" -> "time.loadZoneData"
  "time.loadZoneZip" -> "(runtime.errorString).Error"
  "time.loadZoneZip" -> "(syscall.Errno).Error"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "(*os.PathError).Error"
  "time.loadZoneZip" -> "(*errors.errorString).Error"
  "time.loadZoneZip" -> "(*os.SyscallError).Error"
  "time.loadZoneZip" -> "(*reflect.ValueError).Error"
  "time.loadZoneZip" -> "(*strconv.NumError).Error"
  "time.loadZoneZip" -> "(*time.ParseError).Error"
  "time.loadZoneZip" -> "(*runtime.TypeAssertionError).Error"
  "time.loadZoneZip" -> "errors.New"
  "syscall.Close" -> "syscall.Syscall"
  "time.closefd" -> "syscall.Close"
  "time.loadZoneZip" -> "time.closefd"
  "syscall.Seek" -> "syscall.Syscall"
  "time.preadn" -> "syscall.Seek"
  "syscall.read" -> "syscall.Syscall"
  "syscall.Read" -> "syscall.read"
  "syscall.Read" -> "syscall.raceWriteRange"
  "syscall.Read" -> "syscall.raceAcquire"
  "time.preadn" -> "syscall.Read"
  "time.preadn" -> "errors.New"
  "time.loadZoneZip" -> "time.preadn"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "time.preadn"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "time.preadn"
  "time.loadZoneZip" -> "errors.New"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.preadn"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get2"
  "time.loadZoneZip" -> "time.get4"
  "time.loadZoneFile" -> "time.loadZoneZip"
  "time.readFile" -> "syscall.Open"
  "time.readFile" -> "syscall.Close"
  "time.readFile" -> "syscall.Read"
  "time.loadZoneFile" -> "time.readFile"
  "time.loadZoneFile" -> "time.loadZoneData"
  "time.initLocal" -> "time.loadZoneFile"
  "time.loadLocation" -> "time.loadZoneFile"
  "time.loadLocation" -> "errors.New"
  "time.initLocal" -> "time.loadLocation"
  "(*sync.Once).Do" -> "time.initLocal"
  "(*sync.Once).Do" -> "reflect.methodValueCall"
  "(*sync.Once).Do" -> "syscall.copyenv"
  "runtime.callers$1" -> "runtime.getg"
  "runtime.callers$1" -> "runtime.gentraceback"
  "(*sync.Once).Do" -> "runtime.callers$1"
  "(*sync.Once).Do" -> "(*fmt.ss).Token$1"
  "(*sync.Once).Do" -> "runtime.startpanic_m"
  "(*sync.Once).Do" -> "runtime.dopanic_m"
  "(*sync.Once).Do" -> "runtime.stoptheworld"
  "(*sync.Once).Do" -> "runtime.starttheworld"
  "(*sync.Once).Do" -> "runtime.gc_m"
  "(*sync.Once).Do" -> "(*fmt.fmt).formatFloat$1"
  "(*sync.Once).Do" -> "runtime.largeAlloc_m"
  "(*sync.Once).Do" -> "runtime.mcacheRefill_m"
  "(*sync.Once).Do" -> "runtime.unrollgcproginplace_m"
  "(*sync.Once).Do" -> "runtime.unrollgcprog_m"
  "(*sync.Once).Do" -> "runtime.ready_m"
  "runtime.traceback1" -> "runtime.readgstatus"
  "runtime.traceback1" -> "runtime.gentraceback"
  "runtime.traceback1" -> "runtime.gentraceback"
  "runtime.printcreatedby" -> "runtime.findfunc"
  "runtime.printcreatedby" -> "runtime.gofuncname"
  "runtime.printcreatedby" -> "runtime.showframe"
  "runtime.printcreatedby" -> "runtime.funcline"
  "runtime.traceback1" -> "runtime.printcreatedby"
  "runtime.traceback" -> "runtime.traceback1"
  "runtime.tracealloc$1" -> "runtime.traceback"
  "(*sync.Once).Do" -> "runtime.tracealloc$1"
  "(*sync.Once).Do" -> "runtime.setprofilebucket_m"
  "(*time.Location).get" -> "(*sync.Once).Do"
  "(*time.Location).String" -> "(*time.Location).get"
  "(*fmt.pp).handleMethods" -> "(*time.Location).String"
  "(time.Time).locabs" -> "(*time.Location).get"
  "(*time.Location).lookup" -> "(*time.Location).get"
  "(*time.Location).lookupFirstZone" -> "(*time.Location).firstZoneUsed"
  "(*time.Location).lookup" -> "(*time.Location).lookupFirstZone"
  "(time.Time).locabs" -> "(*time.Location).lookup"
  "(time.Time).Format" -> "(time.Time).locabs"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.startsWithLowerCase"
  "time.nextStdChunk" -> "time.isDigit"
  "(time.Time).Format" -> "time.nextStdChunk"
  "time.absDate" -> "time.isLeap"
  "(time.Time).Format" -> "time.absDate"
  "(time.Time).Format" -> "time.absClock"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "(time.Month).String"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "(time.Month).String"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.absWeekday"
  "(time.Time).Format" -> "(time.Weekday).String"
  "(time.Time).Format" -> "time.absWeekday"
  "(time.Time).Format" -> "(time.Weekday).String"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "(time.Time).Nanosecond"
  "(time.Time).Format" -> "time.formatNano"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).Format" -> "time.appendUint"
  "(time.Time).String" -> "(time.Time).Format"
  "(*fmt.pp).handleMethods" -> "(time.Time).String"
  "(reflect.ChanDir).String" -> "strconv.Itoa"
  "(*fmt.pp).handleMethods" -> "(reflect.ChanDir).String"
  "(*fmt.pp).handleMethods" -> "(reflect.Kind).String"
  "(*fmt.pp).handleMethods" -> "(os.FileMode).String"
  "(*fmt.pp).handleMethods" -> "(*fmt.pp).printArg"
  "(text/scanner.Position).String" -> "(*text/scanner.Position).IsValid"
  "(text/scanner.Position).String" -> "fmt.Sprintf"
  "(*fmt.pp).handleMethods" -> "(text/scanner.Position).String"
  "strconv.FormatFloat" -> "strconv.max"
  "strconv.genericFtoa" -> "math.Float32bits"
  "strconv.genericFtoa" -> "math.Float64bits"
  "strconv.genericFtoa" -> "strconv.fmtB"
  "(*strconv.decimal).Assign" -> "strconv.trim"
  "strconv.bigFtoa" -> "(*strconv.decimal).Assign"
  "strconv.leftShift" -> "strconv.prefixIsLessThan"
  "strconv.leftShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "(*strconv.decimal).Shift" -> "strconv.leftShift"
  "strconv.rightShift" -> "strconv.trim"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "(*strconv.decimal).Shift" -> "strconv.rightShift"
  "strconv.bigFtoa" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "strconv.roundShortest" -> "(*strconv.decimal).Assign"
  "strconv.roundShortest" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).Round" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundUp"
  "(*strconv.decimal).RoundDown" -> "strconv.trim"
  "(*strconv.decimal).Round" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).Round"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundDown"
  "strconv.roundShortest" -> "(*strconv.decimal).RoundUp"
  "strconv.bigFtoa" -> "strconv.roundShortest"
  "strconv.fmtE" -> "strconv.max"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.formatDigits" -> "strconv.fmtE"
  "strconv.formatDigits" -> "strconv.max"
  "strconv.formatDigits" -> "strconv.fmtF"
  "strconv.bigFtoa" -> "strconv.formatDigits"
  "strconv.bigFtoa" -> "strconv.max"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.bigFtoa" -> "(*strconv.decimal).Round"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.genericFtoa" -> "(*strconv.extFloat).AssignComputeBounds"
  "(*strconv.extFloat).ShortestDecimal" -> "(*strconv.extFloat).Normalize"
  "(*strconv.extFloat).frexp10" -> "(*strconv.extFloat).Multiply"
  "strconv.frexp10Many" -> "(*strconv.extFloat).frexp10"
  "strconv.frexp10Many" -> "(*strconv.extFloat).Multiply"
  "strconv.frexp10Many" -> "(*strconv.extFloat).Multiply"
  "(*strconv.extFloat).ShortestDecimal" -> "strconv.frexp10Many"
  "(*strconv.extFloat).ShortestDecimal" -> "strconv.adjustLastDigit"
  "(*strconv.extFloat).ShortestDecimal" -> "strconv.adjustLastDigit"
  "strconv.genericFtoa" -> "(*strconv.extFloat).ShortestDecimal"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.genericFtoa" -> "strconv.max"
  "(*strconv.extFloat).FixedDecimal" -> "(*strconv.extFloat).Normalize"
  "(*strconv.extFloat).FixedDecimal" -> "(*strconv.extFloat).frexp10"
  "(*strconv.extFloat).FixedDecimal" -> "strconv.adjustLastDigitFixed"
  "strconv.genericFtoa" -> "(*strconv.extFloat).FixedDecimal"
  "strconv.genericFtoa" -> "strconv.bigFtoa"
  "strconv.genericFtoa" -> "strconv.formatDigits"
  "strconv.FormatFloat" -> "strconv.genericFtoa"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).String" -> "strconv.FormatFloat"
  "(*fmt.pp).handleMethods" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).String"
  "(time.Duration).String" -> "time.fmtFrac"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtFrac"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtInt"
  "(time.Duration).String" -> "time.fmtInt"
  "(*fmt.pp).handleMethods" -> "(time.Duration).String"
  "(syscall.Signal).String" -> "syscall.itoa"
  "(*fmt.pp).handleMethods" -> "(syscall.Signal).String"
  "(*fmt.pp).handleMethods" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/event.Visibility).String"
  "(*fmt.pp).handleMethods" -> "(*reflect.rtype).String"
  "(*fmt.pp).handleMethods" -> "(time.Month).String"
  "(*fmt.pp).handleMethods" -> "(time.Weekday).String"
  "(*fmt.pp).handleMethods" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.StringQuestion).String"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).String" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).Value"
  "(*fmt.pp).handleMethods" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).String"
  "(reflect.Value).String" -> "(reflect.flag).kind"
  "(reflect.Value).String" -> "(reflect.Value).Type"
  "(reflect.Value).String" -> "(*reflect.rtype).String"
  "(*fmt.pp).handleMethods" -> "(reflect.Value).String"
  "(*fmt.pp).handleMethods" -> "(*bytes.Buffer).String"
  "(*fmt.pp).printValue" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Kind"
  "(reflect.flag).mustBe" -> "(reflect.flag).kind"
  "runtime.Caller" -> "runtime.callers"
  "runtime.Caller" -> "runtime.findfunc"
  "runtime.Caller" -> "runtime.findfunc"
  "runtime.Caller" -> "runtime.funcline"
  "runtime.funcPC" -> "runtime.add"
  "runtime.Caller" -> "runtime.funcPC"
  "reflect.methodName" -> "runtime.Caller"
  "runtime.FuncForPC" -> "runtime.findfunc"
  "reflect.methodName" -> "runtime.FuncForPC"
  "(*runtime.Func).Name" -> "(*runtime.Func).raw"
  "(*runtime.Func).Name" -> "runtime.gofuncname"
  "reflect.methodName" -> "(*runtime.Func).Name"
  "(reflect.flag).mustBe" -> "reflect.methodName"
  "(reflect.flag).mustBe" -> "(reflect.flag).kind"
  "(reflect.Value).Bool" -> "(reflect.flag).mustBe"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Bool"
  "(*fmt.fmt).fmt_boolean" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmt_boolean" -> "(*fmt.fmt).pad"
  "(*fmt.pp).fmtBool" -> "(*fmt.fmt).fmt_boolean"
  "(*fmt.pp).fmtBool" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtBool"
  "(reflect.Value).Int" -> "(reflect.flag).kind"
  "(reflect.Value).Int" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Int"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtInt64" -> "(*fmt.pp).fmtC"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).fmt_qc"
  "(*fmt.pp).fmtInt64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).fmtInt64" -> "(*fmt.pp).fmtUnicode"
  "(*fmt.pp).fmtInt64" -> "(*fmt.fmt).integer"
  "(*fmt.pp).fmtInt64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtInt64"
  "(reflect.Value).Uint" -> "(reflect.flag).kind"
  "(reflect.Value).Uint" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Size"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Size"
  "(reflect.Value).Float" -> "(reflect.flag).kind"
  "(reflect.Value).Float" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Float"
  "strconv.AppendFloat" -> "strconv.genericFtoa"
  "(*fmt.fmt).formatFloat" -> "strconv.AppendFloat"
  "(*fmt.fmt).formatFloat" -> "math.IsInf"
  "(*fmt.fmt).formatFloat" -> "(*fmt.fmt).formatFloat$1"
  "(*fmt.fmt).formatFloat" -> "(*fmt.buffer).WriteByte"
  "(*fmt.fmt).formatFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).formatFloat" -> "(*fmt.buffer).WriteByte"
  "(*fmt.fmt).formatFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).formatFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).formatFloat" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).formatFloat" -> "math.IsInf"
  "(*fmt.fmt).fmt_fb32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_fb32"
  "(*fmt.fmt).fmt_e32" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_e32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_e32"
  "(*fmt.fmt).fmt_E32" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_E32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_E32"
  "(*fmt.fmt).fmt_f32" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_f32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_f32"
  "(*fmt.fmt).fmt_g32" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_g32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_g32"
  "(*fmt.fmt).fmt_G32" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_G32" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.fmt).fmt_G32"
  "(*fmt.pp).fmtFloat32" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtFloat32"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Float"
  "(*fmt.fmt).fmt_fb64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_fb64"
  "(*fmt.fmt).fmt_e64" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_e64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_e64"
  "(*fmt.fmt).fmt_E64" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_E64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_E64"
  "(*fmt.fmt).fmt_f64" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_f64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_f64"
  "(*fmt.fmt).fmt_g64" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_g64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_g64"
  "(*fmt.fmt).fmt_G64" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_G64" -> "(*fmt.fmt).formatFloat"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.fmt).fmt_G64"
  "(*fmt.pp).fmtFloat64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtFloat64"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).String"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_s"
  "(*fmt.fmt).fmt_q" -> "(*fmt.fmt).truncate"
  "(*fmt.fmt).fmt_q" -> "(*fmt.fmt).padString"
  "strconv.CanBackquote" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.fmt).fmt_q" -> "strconv.CanBackquote"
  "strconv.QuoteToASCII" -> "strconv.quoteWith"
  "(*fmt.fmt).fmt_q" -> "strconv.QuoteToASCII"
  "(*fmt.fmt).fmt_q" -> "strconv.Quote"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_q"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_s"
  "(*fmt.fmt).fmt_sbx" -> "(*fmt.fmt).pad"
  "(*fmt.fmt).fmt_sx" -> "(*fmt.fmt).fmt_sbx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_sx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_sx"
  "(*fmt.pp).fmtString" -> "(*fmt.fmt).fmt_q"
  "(*fmt.pp).fmtString" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtString"
  "(reflect.Value).Complex" -> "(reflect.flag).kind"
  "(reflect.Value).Complex" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Complex"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.buffer).WriteByte"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "fmt.doPrec"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.fmt).formatFloat"
  "(*fmt.fmt).fmt_complex" -> "(*fmt.buffer).Write"
  "(*fmt.fmt).fmt_c64" -> "(*fmt.fmt).fmt_complex"
  "(*fmt.pp).fmtComplex64" -> "(*fmt.fmt).fmt_c64"
  "(*fmt.pp).fmtComplex64" -> "(*fmt.fmt).fmt_c64"
  "(*fmt.pp).fmtComplex64" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtComplex64"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Complex"
  "(*fmt.fmt).fmt_c128" -> "(*fmt.fmt).fmt_complex"
  "(*fmt.pp).fmtComplex128" -> "(*fmt.fmt).fmt_c128"
  "(*fmt.pp).fmtComplex128" -> "(*fmt.fmt).fmt_c128"
  "(*fmt.pp).fmtComplex128" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtComplex128"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).IsNil"
  "(reflect.Value).MapKeys" -> "(reflect.flag).mustBe"
  "(reflect.Value).MapKeys" -> "(*reflect.rtype).Kind"
  "(reflect.Value).MapKeys" -> "(reflect.Value).pointer"
  "(reflect.Value).MapKeys" -> "reflect.maplen"
  "(reflect.Value).MapKeys" -> "reflect.mapiterinit"
  "(reflect.Value).MapKeys" -> "reflect.mapiterkey"
  "(reflect.Value).MapKeys" -> "reflect.ifaceIndir"
  "(reflect.Value).MapKeys" -> "reflect.unsafe_New"
  "(reflect.Value).MapKeys" -> "reflect.memmove"
  "(reflect.Value).MapKeys" -> "reflect.mapiternext"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).MapKeys"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(reflect.Value).MapIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).assignTo" -> "reflect.makeMethodValue"
  "reflect.directlyAssignable" -> "(*reflect.rtype).Name"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "(*reflect.rtype).ChanDir" -> "(*reflect.rtype).Kind"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).ChanDir"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Len"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Len"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).ChanDir"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).ChanDir"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "(*reflect.rtype).Key" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Key" -> "reflect.toType"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Key"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Key"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.haveIdenticalUnderlyingType" -> "(*reflect.rtype).Elem"
  "reflect.directlyAssignable" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.directlyAssignable" -> "(*reflect.rtype).Kind"
  "reflect.directlyAssignable" -> "(*reflect.rtype).Kind"
  "reflect.directlyAssignable" -> "(*reflect.rtype).Name"
  "(reflect.Value).assignTo" -> "reflect.directlyAssignable"
  "(reflect.Value).assignTo" -> "(*reflect.rtype).Kind"
  "reflect.implements" -> "(*reflect.rtype).Kind"
  "reflect.implements" -> "(*reflect.rtype).Kind"
  "reflect.implements" -> "(*reflect.uncommonType).uncommon"
  "(reflect.Value).assignTo" -> "reflect.implements"
  "(reflect.Value).assignTo" -> "(*reflect.rtype).String"
  "(reflect.Value).assignTo" -> "(*reflect.rtype).String"
  "(reflect.Value).assignTo" -> "reflect.unsafe_New"
  "(reflect.Value).assignTo" -> "reflect.valueInterface"
  "(reflect.Value).assignTo" -> "(*reflect.rtype).NumMethod"
  "(reflect.Value).assignTo" -> "reflect.ifaceE2I"
  "(reflect.Value).MapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).MapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).MapIndex" -> "reflect.mapaccess"
  "(reflect.Value).MapIndex" -> "(*reflect.rtype).Kind"
  "(reflect.Value).MapIndex" -> "reflect.ifaceIndir"
  "(reflect.Value).MapIndex" -> "reflect.unsafe_New"
  "(reflect.Value).MapIndex" -> "reflect.memmove"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).MapIndex"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(reflect.Value).Elem" -> "(reflect.flag).kind"
  "(reflect.Value).Elem" -> "(*reflect.rtype).NumMethod"
  "(reflect.Value).Elem" -> "reflect.unpackEface"
  "(reflect.Value).Elem" -> "(reflect.flag).kind"
  "(reflect.Value).Elem" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).IsValid"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).add"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(reflect.Value).NumField" -> "(reflect.flag).mustBe"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).NumField"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Field"
  "(reflect.Value).Field" -> "(reflect.flag).kind"
  "(reflect.Value).Field" -> "(reflect.flag).kind"
  "(reflect.Value).Field" -> "(*reflect.rtype).Kind"
  "fmt.getField" -> "(reflect.Value).Field"
  "fmt.getField" -> "(reflect.Value).Kind"
  "fmt.getField" -> "(reflect.Value).Elem"
  "fmt.getField" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printReflectValue" -> "fmt.getField"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Elem"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Pointer"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).Elem"
  "(reflect.Value).Bytes" -> "(reflect.flag).mustBe"
  "(reflect.Value).Bytes" -> "(*reflect.rtype).Elem"
  "(reflect.Value).Bytes" -> "(*reflect.rtype).Kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Bytes"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).fmtBytes" -> "(*reflect.rtype).String"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).Write"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).Write"
  "(*fmt.pp).fmtBytes" -> "(*reflect.rtype).String"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).printArg"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).Write"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmt_s"
  "(*fmt.fmt).fmt_bx" -> "(*fmt.fmt).fmt_sbx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmt_bx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmt_bx"
  "(*fmt.pp).fmtBytes" -> "(*fmt.fmt).fmt_q"
  "(*fmt.pp).fmtBytes" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).CanAddr"
  "(reflect.Value).Len" -> "(reflect.flag).kind"
  "(reflect.Value).Len" -> "(reflect.Value).pointer"
  "(reflect.Value).Len" -> "reflect.chanlen"
  "(reflect.Value).Len" -> "(reflect.Value).pointer"
  "(reflect.Value).Len" -> "reflect.maplen"
  "(reflect.Value).Len" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Len"
  "(reflect.Value).Slice" -> "(reflect.flag).kind"
  "(reflect.Value).Slice" -> "(reflect.flag).kind"
  "(reflect.Value).Slice" -> "(*reflect.rtype).Size"
  "(reflect.Value).Slice" -> "(*reflect.rtype).common"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Slice"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Bytes"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Len"
  "(reflect.Value).Index" -> "(reflect.flag).kind"
  "(reflect.Value).Index" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Index" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Index" -> "(reflect.flag).kind"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Uint"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Type"
  "(*fmt.pp).printReflectValue" -> "(*reflect.rtype).String"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).IsNil"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Len"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Index"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Elem"
  "(*fmt.pp).printReflectValue" -> "(reflect.Value).Kind"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).printReflectValue" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).printValue"
  "(*fmt.pp).unknownType" -> "(reflect.Value).IsValid"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).Write"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).unknownType" -> "(reflect.Value).Type"
  "(*fmt.pp).unknownType" -> "(*reflect.rtype).String"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).unknownType" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).printReflectValue" -> "(*fmt.pp).unknownType"
  "(*fmt.pp).printValue" -> "(*fmt.pp).printReflectValue"
  "(*fmt.pp).badVerb" -> "(*fmt.pp).printValue"
  "(*fmt.pp).badVerb" -> "(reflect.Value).IsValid"
  "(*fmt.pp).badVerb" -> "(*fmt.buffer).Write"
  "(*fmt.pp).printArg" -> "(*fmt.pp).badVerb"
  "(*fmt.pp).printArg" -> "reflect.TypeOf"
  "(*fmt.pp).printArg" -> "(*reflect.rtype).String"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printArg"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtPointer"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBool"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat32"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtFloat64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtComplex128"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInt64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInt64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInt64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInt64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtInt64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtUint64"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtString"
  "(*fmt.pp).printArg" -> "(*fmt.pp).fmtBytes"
  "(*fmt.pp).printArg" -> "(*fmt.pp).handleMethods"
  "(*fmt.pp).printArg" -> "reflect.ValueOf"
  "(*fmt.pp).printArg" -> "(*fmt.pp).printReflectValue"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).doPrintf" -> "reflect.TypeOf"
  "(*fmt.pp).doPrintf" -> "(*reflect.rtype).String"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).WriteString"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).doPrintf" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrintf" -> "(*fmt.buffer).Write"
  "fmt.Sprintf" -> "(*fmt.pp).doPrintf"
  "(*sync.Pool).Put" -> "(*sync.Pool).pin"
  "(*sync.Pool).Put" -> "sync.runtime_procUnpin"
  "(*sync.Pool).Put" -> "(*sync.Mutex).Lock"
  "(*sync.Pool).Put" -> "(*sync.Mutex).Unlock"
  "(*fmt.pp).free" -> "(*sync.Pool).Put"
  "fmt.Sprintf" -> "(*fmt.pp).free"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlTokname" -> "fmt.Sprintf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlTokname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlStatname" -> "fmt.Sprintf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlStatname"
  "fmt.Fprintf" -> "fmt.newPrinter"
  "fmt.Fprintf" -> "(*fmt.pp).doPrintf"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).Truncate" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).grow" -> "(*bytes.Buffer).Truncate"
  "bytes.makeSlice" -> "bytes.makeSlice$1"
  "(*bytes.Buffer).grow" -> "bytes.makeSlice"
  "(*bytes.Buffer).Write" -> "(*bytes.Buffer).grow"
  "fmt.Fprintf" -> "(*bytes.Buffer).Write"
  "syscall.Write" -> "syscall.raceReleaseMerge"
  "syscall.write" -> "syscall.Syscall"
  "syscall.Write" -> "syscall.write"
  "syscall.Write" -> "syscall.raceReadRange"
  "(*os.File).write" -> "syscall.Write"
  "(*os.File).write" -> "os.fixCount"
  "(*os.File).Write" -> "(*os.File).write"
  "os.epipecheck" -> "sync/atomic.AddInt32"
  "os.epipecheck" -> "sync/atomic.StoreInt32"
  "os.epipecheck" -> "os.sigpipe"
  "(*os.File).Write" -> "os.epipecheck"
  "fmt.Fprintf" -> "(*os.File).Write"
  "(*fmt.pp).Write" -> "(*fmt.buffer).Write"
  "fmt.Fprintf" -> "(*fmt.pp).Write"
  "fmt.Fprintf" -> "(*fmt.buffer).Write"
  "fmt.Fprintf" -> "(*fmt.pp).free"
  "fmt.Printf" -> "fmt.Fprintf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "unicode/utf8.FullRune" -> "unicode/utf8.decodeRuneInternal"
  "(*text/scanner.Scanner).next" -> "unicode/utf8.FullRune"
  "(*text/scanner.Scanner).next" -> "(*bytes.Buffer).Write"
  "(*bytes.Buffer).Read" -> "(*bytes.Buffer).Truncate"
  "(*text/scanner.Scanner).next" -> "(*bytes.Buffer).Read"
  "(*text/scanner.Scanner).next" -> "(*strings.Reader).Read"
  "(*os.File).read" -> "syscall.Read"
  "(*os.File).read" -> "os.fixCount"
  "(*os.File).Read" -> "(*os.File).read"
  "(*text/scanner.Scanner).next" -> "(*os.File).Read"
  "(*text/scanner.Scanner).next" -> "(*runtime.TypeAssertionError).Error"
  "(*text/scanner.Scanner).next" -> "(runtime.errorString).Error"
  "(*text/scanner.Scanner).next" -> "(syscall.Errno).Error"
  "(*fmt.ss).Read" -> "errors.New"
  "(*text/scanner.Scanner).next" -> "(*fmt.ss).Read"
  "(*text/scanner.Scanner).next" -> "(*os.PathError).Error"
  "(*text/scanner.Scanner).next" -> "(*errors.errorString).Error"
  "(*text/scanner.Scanner).error" -> "(*text/scanner.Position).IsValid"
  "(*text/scanner.Scanner).error" -> "(*text/scanner.Scanner).Pos"
  "(*text/scanner.Scanner).error" -> "fmt.Fprintf"
  "(*text/scanner.Scanner).next" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).next" -> "unicode/utf8.DecodeRune"
  "(*text/scanner.Scanner).next" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).next" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).next" -> "(*os.SyscallError).Error"
  "(*text/scanner.Scanner).next" -> "(*reflect.ValueError).Error"
  "(*text/scanner.Scanner).next" -> "(*strconv.NumError).Error"
  "(*text/scanner.Scanner).next" -> "(*time.ParseError).Error"
  "(*text/scanner.Scanner).Peek" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Peek" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).Peek"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*bytes.Buffer).Reset" -> "(*bytes.Buffer).Truncate"
  "(*text/scanner.Scanner).Scan" -> "(*bytes.Buffer).Reset"
  "unicode.isExcludingLatin" -> "unicode.is16"
  "unicode.isExcludingLatin" -> "unicode.is32"
  "unicode.IsDigit" -> "unicode.isExcludingLatin"
  "(*text/scanner.Scanner).isIdentRune" -> "unicode.IsDigit"
  "unicode.IsLetter" -> "unicode.isExcludingLatin"
  "(*text/scanner.Scanner).isIdentRune" -> "unicode.IsLetter"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).isIdentRune"
  "(*text/scanner.Scanner).Scan" -> "text/scanner.isDecimal"
  "(*text/scanner.Scanner).scanIdentifier" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanIdentifier" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanIdentifier" -> "(*text/scanner.Scanner).isIdentRune"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanIdentifier"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanMantissa" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanMantissa" -> "text/scanner.isDecimal"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).scanMantissa"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanNumber" -> "text/scanner.digitVal"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanNumber" -> "text/scanner.isDecimal"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanFraction" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanFraction" -> "(*text/scanner.Scanner).scanMantissa"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).scanFraction"
  "(*text/scanner.Scanner).scanExponent" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanExponent" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanExponent" -> "(*text/scanner.Scanner).scanMantissa"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).scanExponent"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).scanFraction"
  "(*text/scanner.Scanner).scanNumber" -> "(*text/scanner.Scanner).scanExponent"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanNumber"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanString" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanString" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanDigits" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanDigits" -> "text/scanner.digitVal"
  "(*text/scanner.Scanner).scanDigits" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).scanDigits"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).scanDigits"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).scanDigits"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).scanDigits"
  "(*text/scanner.Scanner).scanEscape" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanString" -> "(*text/scanner.Scanner).scanEscape"
  "(*text/scanner.Scanner).scanString" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanString"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "text/scanner.isDecimal"
  "(*text/scanner.Scanner).scanChar" -> "(*text/scanner.Scanner).scanString"
  "(*text/scanner.Scanner).scanChar" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanChar"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanMantissa"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanExponent"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanComment" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanComment"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanComment"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanRawString" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).scanRawString" -> "(*text/scanner.Scanner).error"
  "(*text/scanner.Scanner).scanRawString" -> "(*text/scanner.Scanner).next"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).scanRawString"
  "(*text/scanner.Scanner).Scan" -> "(*text/scanner.Scanner).next"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Scan"
  "(*text/scanner.Scanner).TokenText" -> "(*bytes.Buffer).Len"
  "(*text/scanner.Scanner).TokenText" -> "(*bytes.Buffer).Write"
  "(*text/scanner.Scanner).TokenText" -> "(*bytes.Buffer).String"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).TokenText"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Peek"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Scan"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Scan"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Scan"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "(*text/scanner.Scanner).Scan"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "strings.HasPrefix"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.stripSurroundingQuotes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "strings.HasPrefix"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex" -> "strings.HasPrefix"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qllex1" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Lex"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qllex1" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlTokname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qllex1" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qllex1"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qllex1"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Error" -> "fmt.Sprintf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Error"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlStatname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlTokname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlTokname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlStatname"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Printf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewQuestionaireNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewActionNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewActionNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewQuestionNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewComputedQuestion"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "fmt.Sprintf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.lexer).Error"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewIfNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewIfNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewIfNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewIfNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolAndNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolAndNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolOrNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolOrNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewEqualsNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewEqualsNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewNotEqualsNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewNotEqualsNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMoreThanNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMoreThanNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewLessThanNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewLessThanNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMoreOrEqualsThanNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMoreOrEqualsThanNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewLessOrEqualsThanNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewLessOrEqualsThanNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolNegNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewSingleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewBoolNegNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathAddNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathAddNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathSubNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathSubNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathMulNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathMulNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathDivNode" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewDoubleTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewMathDivNode"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "math.Inf" -> "math.Float64frombits"
  "strconv.special" -> "math.Inf"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "strconv.special" -> "math.Inf"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "math.NaN" -> "math.Float64frombits"
  "strconv.special" -> "math.NaN"
  "strconv.special" -> "math.Inf"
  "strconv.special" -> "strconv.equalIgnoreCase"
  "strconv.atof32" -> "strconv.special"
  "strconv.atof32" -> "strconv.readFloat"
  "strconv.atof32" -> "(*strconv.decimal).set"
  "strconv.atof32" -> "strconv.atof32exact"
  "(*strconv.extFloat).AssignDecimal" -> "(*strconv.extFloat).Normalize"
  "(*strconv.extFloat).AssignDecimal" -> "(*strconv.extFloat).Multiply"
  "(*strconv.extFloat).AssignDecimal" -> "(*strconv.extFloat).Normalize"
  "(*strconv.extFloat).AssignDecimal" -> "(*strconv.extFloat).Multiply"
  "(*strconv.extFloat).AssignDecimal" -> "(*strconv.extFloat).Normalize"
  "strconv.atof32" -> "(*strconv.extFloat).AssignDecimal"
  "(*strconv.extFloat).floatBits" -> "(*strconv.extFloat).Normalize"
  "strconv.atof32" -> "(*strconv.extFloat).floatBits"
  "strconv.atof32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.rangeError"
  "strconv.atof32" -> "strconv.syntaxError"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).Shift"
  "(*strconv.decimal).RoundedInteger" -> "strconv.shouldRoundUp"
  "(*strconv.decimal).floatBits" -> "(*strconv.decimal).RoundedInteger"
  "strconv.atof32" -> "(*strconv.decimal).floatBits"
  "strconv.atof32" -> "math.Float32frombits"
  "strconv.atof32" -> "strconv.rangeError"
  "strconv.ParseFloat" -> "strconv.atof32"
  "strconv.atof64" -> "strconv.special"
  "strconv.atof64" -> "strconv.readFloat"
  "strconv.atof64" -> "(*strconv.decimal).set"
  "strconv.atof64" -> "strconv.atof64exact"
  "strconv.atof64" -> "(*strconv.extFloat).AssignDecimal"
  "strconv.atof64" -> "(*strconv.extFloat).floatBits"
  "strconv.atof64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.rangeError"
  "strconv.atof64" -> "strconv.syntaxError"
  "strconv.atof64" -> "(*strconv.decimal).floatBits"
  "strconv.atof64" -> "math.Float64frombits"
  "strconv.atof64" -> "strconv.rangeError"
  "strconv.ParseFloat" -> "strconv.atof64"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "strconv.ParseFloat"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NewTermNode"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.ReadQL" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.qlParse"
  "(*reflect.rtype).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByIndex" -> "reflect.toType"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Field"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Elem"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Elem"
  "(*reflect.structType).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByIndex" -> "(*reflect.structType).FieldByIndex"
  "(*time.Location).lookupName" -> "(*time.Location).get"
  "(*time.Location).lookupName" -> "(*time.Location).lookup"
  "sync.init#1" -> "sync.runtime_registerPoolCleanup"
  "syscall.Fchown" -> "syscall.Syscall"
  "(reflect.Value).Recv" -> "(reflect.flag).mustBe"
  "(reflect.flag).mustBeExported" -> "reflect.methodName"
  "(reflect.flag).mustBeExported" -> "reflect.methodName"
  "(reflect.Value).Recv" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).recv" -> "(*reflect.rtype).Kind"
  "(reflect.Value).recv" -> "reflect.ifaceIndir"
  "(reflect.Value).recv" -> "reflect.unsafe_New"
  "(reflect.Value).recv" -> "(reflect.Value).pointer"
  "(reflect.Value).recv" -> "reflect.chanrecv"
  "(reflect.Value).Recv" -> "(reflect.Value).recv"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).LeftTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).RightTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathAddNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathAddNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathSubNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathSubNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathMulNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathMulNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathDivNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathDivNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).IdentifierReference"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).Type"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.StringQuestion).Type"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).Type"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).Type"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.ComputedQuestion).Type"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Content"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).Value"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Content"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).Value"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Content"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.StringQuestion).String"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).NumericConstant"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).StringConstant"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathTermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).IdentifierReference"
  "log.Fatalf" -> "fmt.Sprintf"
  "time.Now" -> "time.now"
  "(*log.Logger).Output" -> "time.Now"
  "(*log.Logger).Output" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Output" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).Output" -> "(*sync.Mutex).Unlock"
  "(*log.Logger).Output" -> "runtime.Caller"
  "(time.Time).abs" -> "(*time.Location).get"
  "(time.Time).abs" -> "(*time.Location).lookup"
  "(time.Time).date" -> "(time.Time).abs"
  "(time.Time).date" -> "time.absDate"
  "(time.Time).Date" -> "(time.Time).date"
  "(*log.Logger).formatHeader" -> "(time.Time).Date"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(time.Time).Clock" -> "(time.Time).abs"
  "(time.Time).Clock" -> "time.absClock"
  "(*log.Logger).formatHeader" -> "(time.Time).Clock"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "(time.Time).Nanosecond"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).formatHeader" -> "log.itoa"
  "(*log.Logger).Output" -> "(*log.Logger).formatHeader"
  "(*log.Logger).Output" -> "(*sync.Mutex).Lock"
  "(*log.Logger).Output" -> "(*bytes.Buffer).Write"
  "(*log.Logger).Output" -> "(*os.File).Write"
  "(*log.Logger).Output" -> "(*fmt.pp).Write"
  "(*log.Logger).Output" -> "(*fmt.buffer).Write"
  "log.Fatalf" -> "(*log.Logger).Output"
  "syscall.Exit" -> "syscall.Syscall"
  "os.Exit" -> "syscall.Exit"
  "log.Fatalf" -> "os.Exit"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathTermNode" -> "log.Fatalf"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MathTermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(*text/scanner.Scanner).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "log.Fatalf"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.SingleTermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode"
  "syscall.Fstat" -> "syscall.Syscall"
  "(*os.File).Stat" -> "syscall.Fstat"
  "os.fileInfoFromStat" -> "os.basename"
  "os.timespecToTime" -> "time.Unix"
  "os.fileInfoFromStat" -> "os.timespecToTime"
  "(*os.File).Stat" -> "os.fileInfoFromStat"
  "reflect.cvtI2I" -> "(reflect.Value).IsNil"
  "reflect.Zero" -> "(*reflect.rtype).common"
  "reflect.Zero" -> "(*reflect.rtype).Kind"
  "reflect.Zero" -> "reflect.ifaceIndir"
  "reflect.Zero" -> "reflect.unsafe_New"
  "reflect.cvtI2I" -> "reflect.Zero"
  "reflect.cvtI2I" -> "(reflect.Value).Elem"
  "reflect.cvtT2I" -> "(*reflect.rtype).common"
  "reflect.cvtT2I" -> "reflect.unsafe_New"
  "reflect.cvtT2I" -> "reflect.valueInterface"
  "reflect.cvtT2I" -> "(*reflect.rtype).NumMethod"
  "reflect.cvtT2I" -> "(*reflect.rtype).common"
  "reflect.cvtT2I" -> "reflect.ifaceE2I"
  "reflect.cvtI2I" -> "reflect.cvtT2I"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Identifier"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Type"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Content"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.ComputedQuestion).Value"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveMathNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "fmt.Sprintf"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).From" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.StringQuestion).From"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).From" -> "strconv.ParseFloat"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).From" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.NumericQuestion).From"
  "strconv.ParseInt" -> "strconv.syntaxError"
  "strconv.ParseUint" -> "strconv.cutoff64"
  "strconv.ParseUint" -> "strconv.Itoa"
  "strconv.ParseUint" -> "errors.New"
  "strconv.ParseInt" -> "strconv.ParseUint"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.ParseInt" -> "strconv.rangeError"
  "strconv.Atoi" -> "strconv.ParseInt"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).From" -> "strconv.Atoi"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).From" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.BoolQuestion).From"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).From" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.ComputedQuestion).From"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).From"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Clone"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).QuestionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode"
  "(*os.File).seek" -> "syscall.Seek"
  "os.IsNotExist" -> "os.isNotExist"
  "os.init#2" -> "os.runtime_args"
  "(*bytes.Buffer).WriteString" -> "(*bytes.Buffer).grow"
  "io.WriteString" -> "(*bytes.Buffer).WriteString"
  "(*os.File).WriteString" -> "(*os.File).Write"
  "io.WriteString" -> "(*os.File).WriteString"
  "io.WriteString" -> "(*bytes.Buffer).Write"
  "io.WriteString" -> "(*os.File).Write"
  "io.WriteString" -> "(*fmt.pp).Write"
  "io.WriteString" -> "(*fmt.buffer).WriteString"
  "io.WriteString" -> "(*fmt.buffer).Write"
  "runtime.forcegchelper" -> "runtime.getg"
  "runtime.forcegchelper" -> "runtime.lock"
  "runtime.forcegchelper" -> "runtime.gothrow"
  "runtime.forcegchelper" -> "runtime.atomicstore"
  "runtime.forcegchelper" -> "runtime.goparkunlock"
  "runtime.gogc" -> "runtime.acquirem"
  "runtime.gogc" -> "runtime.getg"
  "runtime.gogc" -> "runtime.releasem"
  "runtime.gogc" -> "runtime.releasem"
  "runtime.gogc" -> "runtime.semacquire"
  "runtime.gogc" -> "runtime.semrelease"
  "runtime.gogc" -> "runtime.nanotime"
  "runtime.gogc" -> "runtime.acquirem"
  "runtime.gogc" -> "runtime.releasem"
  "runtime.gogc" -> "runtime.onM"
  "runtime.gogc" -> "runtime.acquirem"
  "runtime.gogc" -> "runtime.gothrow"
  "runtime.clearpools" -> "time.initLocal"
  "runtime.clearpools" -> "reflect.methodValueCall"
  "runtime.clearpools" -> "runtime.setFinalizer_m"
  "runtime.clearpools" -> "runtime.gc_m"
  "runtime.clearpools" -> "runtime.removeFinalizer_m"
  "runtime.clearpools" -> "runtime.startpanic_m"
  "runtime.clearpools" -> "runtime.starttheworld"
  "runtime.clearpools" -> "sync.poolCleanup"
  "runtime.clearpools" -> "syscall.copyenv"
  "runtime.clearpools" -> "runtime.callers$1"
  "runtime.clearpools" -> "(*fmt.ss).Token$1"
  "runtime.clearpools" -> "runtime.dopanic_m"
  "runtime.clearpools" -> "runtime.stoptheworld"
  "runtime.clearpools" -> "(*fmt.fmt).formatFloat$1"
  "runtime.clearpools" -> "runtime.sigpanic"
  "runtime.clearpools" -> "runtime.largeAlloc_m"
  "runtime.clearpools" -> "runtime.mcacheRefill_m"
  "runtime.clearpools" -> "runtime.unrollgcproginplace_m"
  "runtime.clearpools" -> "runtime.unrollgcprog_m"
  "runtime.clearpools" -> "runtime.ready_m"
  "runtime.clearpools" -> "runtime.tracealloc$1"
  "runtime.clearpools" -> "runtime.setprofilebucket_m"
  "runtime.gogc" -> "runtime.clearpools"
  "runtime.gogc" -> "runtime.semrelease"
  "runtime.gogc" -> "runtime.onM"
  "runtime.gogc" -> "runtime.releasem"
  "runtime.gogc" -> "runtime.nanotime"
  "runtime.gogc" -> "runtime.onM"
  "runtime.Gosched" -> "runtime.mcall"
  "runtime.gogc" -> "runtime.Gosched"
  "runtime.forcegchelper" -> "runtime.gogc"
  "runtime.init#4" -> "runtime.forcegchelper"
  "fmt.notSpace" -> "fmt.isSpace"
  "bytes.init" -> "errors.init"
  "io.init" -> "errors.init"
  "sync.init" -> "sync/atomic.init"
  "runtime.init" -> "runtime.funcPC"
  "runtime.init" -> "runtime.funcPC"
  "runtime.init#1" -> "runtime.get_random_data"
  "runtime.init#1" -> "runtime.memmove"
  "runtime.init#1" -> "runtime.nanotime"
  "runtime.init" -> "runtime.init#1"
  "runtime.init#2" -> "runtime.gothrow"
  "runtime.init" -> "runtime.init#2"
  "runtime.init" -> "runtime.init#3"
  "runtime.init" -> "runtime.init#4"
  "sync.init" -> "runtime.init"
  "sync.init" -> "sync.init#1"
  "sync.init#2" -> "sync.runtime_Syncsemcheck"
  "sync.init" -> "sync.init#2"
  "io.init" -> "sync.init"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "io.init" -> "errors.New"
  "bytes.init" -> "io.init"
  "bytes.init" -> "unicode/utf8.init"
  "bytes.init" -> "unicode.init"
  "bytes.init" -> "errors.New"
  "text/scanner.init" -> "bytes.init"
  "math.init" -> "math.init#1"
  "fmt.init" -> "math.init"
  "strconv.init" -> "math.init"
  "strconv.init" -> "errors.init"
  "strconv.init" -> "unicode/utf8.init"
  "strconv.init" -> "errors.New"
  "strconv.init" -> "errors.New"
  "fmt.init" -> "strconv.init"
  "fmt.init" -> "unicode/utf8.init"
  "fmt.init" -> "errors.init"
  "fmt.init" -> "io.init"
  "os.init" -> "io.init"
  "syscall.init" -> "sync.init"
  "syscall.init" -> "runtime.init"
  "syscall.init" -> "errors.init"
  "syscall.init" -> "syscall.runtime_envs"
  "os.init" -> "syscall.init"
  "time.init" -> "errors.init"
  "time.init" -> "syscall.init"
  "time.init" -> "sync.init"
  "time.init" -> "runtime.init"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "errors.New"
  "time.init" -> "syscall.Getenv"
  "time.init" -> "errors.New"
  "runtime.gogetenv" -> "runtime.environ"
  "runtime.gogetenv" -> "runtime.gothrow"
  "runtime.gogetenv" -> "runtime.environ"
  "runtime.GOROOT" -> "runtime.gogetenv"
  "time.init" -> "runtime.GOROOT"
  "os.init" -> "time.init"
  "os.init" -> "errors.init"
  "os.init" -> "runtime.init"
  "os.init" -> "sync/atomic.init"
  "os.init" -> "sync.init"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "os.init" -> "errors.New"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.findObject" -> "runtime.gomcache"
  "runtime.findObject" -> "runtime.lock"
  "runtime.findObject" -> "runtime.purgecachedstats"
  "runtime.findObject" -> "runtime.unlock"
  "runtime.findObject" -> "runtime.add"
  "runtime.findObject" -> "runtime.add"
  "runtime.SetFinalizer" -> "runtime.findObject"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.acquirem"
  "runtime.SetFinalizer" -> "runtime.onM"
  "runtime.SetFinalizer" -> "runtime.releasem"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.getitab" -> "runtime.gothrow"
  "runtime.getitab" -> "runtime.add"
  "runtime.getitab" -> "runtime.persistentalloc"
  "runtime.getitab" -> "runtime.lock"
  "runtime.getitab" -> "runtime.atomicloadp"
  "runtime.getitab" -> "runtime.unlock"
  "runtime.getitab" -> "runtime.add"
  "runtime.getitab" -> "runtime.add"
  "runtime.getitab" -> "runtime.add"
  "runtime.getitab" -> "runtime.unlock"
  "runtime.getitab" -> "runtime.gothrow"
  "runtime.getitab" -> "runtime.atomicstorep"
  "runtime.getitab" -> "runtime.unlock"
  "runtime.assertE2I2" -> "runtime.getitab"
  "runtime.SetFinalizer" -> "runtime.assertE2I2"
  "runtime.SetFinalizer" -> "runtime.round"
  "runtime.SetFinalizer" -> "runtime.round"
  "runtime.runfinq" -> "runtime.lock"
  "runtime.runfinq" -> "runtime.getg"
  "runtime.runfinq" -> "runtime.goparkunlock"
  "runtime.runfinq" -> "runtime.unlock"
  "runtime.racefingo" -> "runtime.gothrow"
  "runtime.runfinq" -> "runtime.racefingo"
  "runtime.runfinq" -> "runtime.add"
  "runtime.runfinq" -> "runtime.lock"
  "runtime.runfinq" -> "runtime.unlock"
  "runtime.mallocgc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.gomcache"
  "runtime.mallocgc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.onM"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.roundup"
  "runtime.mallocgc" -> "runtime.roundup"
  "runtime.mallocgc" -> "runtime.roundup"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.onM"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.onM"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.memclr"
  "runtime.mallocgc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.onM"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.atomicloadp"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.onM"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.mallocgc" -> "runtime.add"
  "runtime.racemalloc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.racemalloc"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mallocgc" -> "runtime.gothrow"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.tracealloc" -> "runtime.lock"
  "runtime.tracealloc" -> "runtime.getg"
  "runtime.goroutineheader" -> "runtime.readgstatus"
  "runtime.goroutineheader" -> "runtime.nanotime"
  "runtime.tracealloc" -> "runtime.goroutineheader"
  "runtime.tracealloc" -> "runtime.getcallerpc"
  "runtime.tracealloc" -> "runtime.getcallersp"
  "runtime.tracealloc" -> "runtime.onM"
  "runtime.tracealloc" -> "runtime.unlock"
  "runtime.tracealloc" -> "runtime.goroutineheader"
  "runtime.tracealloc" -> "runtime.traceback"
  "runtime.mallocgc" -> "runtime.tracealloc"
  "runtime.mallocgc" -> "runtime.acquirem"
  "runtime.mProf_Malloc" -> "runtime.callers"
  "runtime.mProf_Malloc" -> "runtime.lock"
  "runtime.mProf_Malloc" -> "runtime.stkbucket"
  "(*runtime.bucket).mp" -> "runtime.gothrow"
  "(*runtime.bucket).mp" -> "runtime.add"
  "runtime.mProf_Malloc" -> "(*runtime.bucket).mp"
  "runtime.mProf_Malloc" -> "runtime.unlock"
  "runtime.setprofilebucket" -> "runtime.getg"
  "runtime.setprofilebucket" -> "runtime.onM"
  "runtime.mProf_Malloc" -> "runtime.setprofilebucket"
  "runtime.profilealloc" -> "runtime.mProf_Malloc"
  "runtime.profilealloc" -> "runtime.fastrand1"
  "runtime.mallocgc" -> "runtime.profilealloc"
  "runtime.mallocgc" -> "runtime.releasem"
  "runtime.mallocgc" -> "runtime.gogc"
  "runtime.runfinq" -> "runtime.mallocgc"
  "runtime.runfinq" -> "runtime.gothrow"
  "runtime.runfinq" -> "runtime.reflectcall"
  "runtime.runfinq" -> "runtime.gothrow"
  "runtime.assertE2I" -> "runtime.getitab"
  "runtime.runfinq" -> "runtime.assertE2I"
  "runtime.createfing" -> "runtime.runfinq"
  "runtime.createfing" -> "runtime.cas"
  "runtime.SetFinalizer" -> "runtime.createfing"
  "runtime.SetFinalizer" -> "runtime.acquirem"
  "runtime.SetFinalizer" -> "runtime.onM"
  "runtime.SetFinalizer" -> "runtime.gothrow"
  "runtime.SetFinalizer" -> "runtime.releasem"
  "os.NewFile" -> "runtime.SetFinalizer"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.NewFile"
  "os.init" -> "os.init#1"
  "os.init" -> "os.init#2"
  "syscall.nametomib" -> "syscall.ByteSliceFromString"
  "syscall.sysctl" -> "syscall.Syscall6"
  "syscall.nametomib" -> "syscall.sysctl"
  "syscall.Sysctl" -> "syscall.nametomib"
  "syscall.Sysctl" -> "syscall.sysctl"
  "syscall.Sysctl" -> "syscall.sysctl"
  "os.init#3" -> "syscall.Sysctl"
  "os.init" -> "os.init#3"
  "fmt.init" -> "os.init"
  "reflect.init" -> "runtime.init"
  "reflect.init" -> "strconv.init"
  "reflect.init" -> "sync.init"
  "reflect.init" -> "math.init"
  "reflect.init" -> "reflect.TypeOf"
  "fmt.init" -> "reflect.init"
  "fmt.init" -> "sync.init"
  "fmt.init" -> "reflect.TypeOf"
  "fmt.init" -> "reflect.TypeOf"
  "fmt.init" -> "reflect.TypeOf"
  "fmt.init" -> "errors.New"
  "fmt.init" -> "errors.New"
  "fmt.init" -> "fmt.init#1"
  "(*reflect.rtype).Bits" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Bits" -> "(*reflect.rtype).String"
  "fmt.init" -> "(*reflect.rtype).Bits"
  "fmt.init" -> "(*reflect.rtype).Bits"
  "text/scanner.init" -> "fmt.init"
  "text/scanner.init" -> "io.init"
  "text/scanner.init" -> "os.init"
  "text/scanner.init" -> "unicode.init"
  "text/scanner.init" -> "unicode/utf8.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init" -> "text/scanner.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init" -> "strconv.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init" -> "fmt.init"
  "syscall.Getdirentries" -> "syscall.Syscall6"
  "syscall.ReadDirent" -> "syscall.Getdirentries"
  "(*os.File).readdirnames" -> "syscall.ReadDirent"
  "(*os.File).readdirnames" -> "os.fixCount"
  "(*os.File).readdirnames" -> "syscall.ParseDirent"
  "(*os.File).readdirnames" -> "os.NewSyscallError"
  "(*os.File).Readdirnames" -> "(*os.File).readdirnames"
  "(*os.File).readdir" -> "(*os.File).Readdirnames"
  "syscall.Lstat" -> "syscall.BytePtrFromString"
  "syscall.Lstat" -> "syscall.Syscall"
  "syscall.Lstat" -> "syscall.use"
  "os.Lstat" -> "syscall.Lstat"
  "os.Lstat" -> "os.fileInfoFromStat"
  "(*os.File).readdir" -> "os.Lstat"
  "(*os.File).readdir" -> "os.IsNotExist"
  "(*os.File).Readdir" -> "(*os.File).readdir"
  "reflect.makeComplex" -> "(*reflect.rtype).common"
  "reflect.makeComplex" -> "reflect.unsafe_New"
  "reflect.makeComplex" -> "(*reflect.rtype).Kind"
  "(*bytes.Buffer).readSlice" -> "bytes.IndexByte"
  "syscall.Pread" -> "syscall.Syscall6"
  "reflect.cvtIntFloat" -> "(reflect.Value).Int"
  "reflect.makeFloat" -> "(*reflect.rtype).common"
  "reflect.makeFloat" -> "reflect.unsafe_New"
  "reflect.makeFloat" -> "(*reflect.rtype).Kind"
  "reflect.cvtIntFloat" -> "reflect.makeFloat"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/event.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MoreOrEqualsThanNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(time.Time).YearDay" -> "(time.Time).date"
  "reflect.storeRcvr" -> "(*reflect.rtype).Kind"
  "reflect.storeRcvr" -> "reflect.ifaceIndir"
  "(*fmt.ss).UnreadRune" -> "(*fmt.ss).UnreadRune"
  "(*strings.Reader).UnreadRune" -> "errors.New"
  "(*fmt.ss).UnreadRune" -> "(*strings.Reader).UnreadRune"
  "(*bytes.Buffer).UnreadRune" -> "errors.New"
  "unicode/utf8.DecodeLastRune" -> "unicode/utf8.RuneStart"
  "unicode/utf8.DecodeLastRune" -> "unicode/utf8.DecodeRune"
  "(*bytes.Buffer).UnreadRune" -> "unicode/utf8.DecodeLastRune"
  "(*fmt.ss).UnreadRune" -> "(*bytes.Buffer).UnreadRune"
  "(*bytes.Buffer).ReadFrom" -> "(*bytes.Buffer).Truncate"
  "(*bytes.Buffer).ReadFrom" -> "(*bytes.Buffer).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*strings.Reader).Read"
  "(*bytes.Buffer).ReadFrom" -> "(*os.File).Read"
  "(*bytes.Buffer).ReadFrom" -> "bytes.makeSlice"
  "(*bytes.Buffer).ReadFrom" -> "(*fmt.ss).Read"
  "(reflect.flag).mustBeAssignable" -> "reflect.methodName"
  "(reflect.flag).mustBeAssignable" -> "reflect.methodName"
  "(reflect.flag).mustBeAssignable" -> "reflect.methodName"
  "(reflect.Value).Set" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).Set" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Set" -> "(reflect.flag).kind"
  "(reflect.Value).Set" -> "(reflect.Value).assignTo"
  "(reflect.Value).Set" -> "reflect.memmove"
  "(*bytes.Buffer).Next" -> "(*bytes.Buffer).Len"
  "(time.Time).Second" -> "(time.Time).abs"
  "(reflect.Value).SetInt" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetInt" -> "(reflect.flag).kind"
  "(reflect.Value).SetInt" -> "(reflect.flag).kind"
  "(*reflect.rtype).MethodByName" -> "(*reflect.rtype).Kind"
  "(*reflect.interfaceType).Method" -> "reflect.toType"
  "(*reflect.interfaceType).MethodByName" -> "(*reflect.interfaceType).Method"
  "(*reflect.rtype).MethodByName" -> "(*reflect.interfaceType).MethodByName"
  "(*reflect.uncommonType).MethodByName" -> "(*reflect.uncommonType).Method"
  "(*reflect.rtype).MethodByName" -> "(*reflect.uncommonType).MethodByName"
  "(reflect.Value).MethodByName" -> "(*reflect.rtype).MethodByName"
  "(reflect.Value).Method" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Method" -> "(*reflect.rtype).NumMethod"
  "(reflect.Value).Method" -> "(reflect.Value).IsNil"
  "(reflect.Value).MethodByName" -> "(reflect.Value).Method"
  "(*fmt.ss).ReadRune" -> "unicode/utf8.RuneLen"
  "(*bytes.Buffer).ReadRune" -> "(*bytes.Buffer).Truncate"
  "(*bytes.Buffer).ReadRune" -> "unicode/utf8.DecodeRune"
  "(*fmt.ss).ReadRune" -> "(*bytes.Buffer).ReadRune"
  "(*fmt.ss).ReadRune" -> "(*fmt.ss).ReadRune"
  "(*strings.Reader).ReadRune" -> "unicode/utf8.DecodeRuneInString"
  "(*fmt.ss).ReadRune" -> "(*strings.Reader).ReadRune"
  "(time.Time).Minute" -> "(time.Time).abs"
  "(syscall.Errno).Temporary" -> "(syscall.Errno).Timeout"
  "(reflect.Value).TryRecv" -> "(reflect.flag).mustBe"
  "(reflect.Value).TryRecv" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).TryRecv" -> "(reflect.Value).recv"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).RLock"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).RUnlock"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).Lock"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).RUnlock"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).Unlock"
  "(*reflect.rtype).ptrTo" -> "reflect.fnv1"
  "(*reflect.rtype).ptrTo" -> "(*sync.RWMutex).Unlock"
  "(*fmt.ss).getRune" -> "(*fmt.ss).ReadRune"
  "(*fmt.ss).getRune" -> "(*fmt.ss).error"
  "(*fmt.ss).peek" -> "(*fmt.ss).getRune"
  "(*fmt.ss).peek" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).peek" -> "fmt.indexRune"
  "(reflect.Value).OverflowFloat" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowFloat" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowFloat" -> "(reflect.flag).kind"
  "reflect.cvtDirect" -> "(*reflect.rtype).common"
  "reflect.cvtDirect" -> "reflect.unsafe_New"
  "reflect.cvtDirect" -> "reflect.memmove"
  "reflect.cvtStringBytes" -> "(reflect.Value).String"
  "reflect.New" -> "reflect.unsafe_New"
  "reflect.New" -> "(*reflect.rtype).common"
  "reflect.New" -> "(*reflect.rtype).ptrTo"
  "reflect.makeBytes" -> "reflect.New"
  "reflect.makeBytes" -> "(reflect.Value).Elem"
  "(reflect.Value).SetBytes" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetBytes" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetBytes" -> "(*reflect.rtype).Elem"
  "(reflect.Value).SetBytes" -> "(*reflect.rtype).Kind"
  "reflect.makeBytes" -> "(reflect.Value).SetBytes"
  "reflect.cvtStringBytes" -> "reflect.makeBytes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).QuestionaireNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionaireNode).Stack"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).QuestionaireNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).QuestionaireNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(*text/scanner.Scanner).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionaireNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionaireNode).Stack"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionaireNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionaireNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).Conditions"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).TermNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).TermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).LeftTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).RightTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveTermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).NotEqualsNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).LeftTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).RightTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).TermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).TermNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).EqualsNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MoreThanNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MoreThanNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).LessThanNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).LessThanNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).MoreOrEqualsThanNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).LessOrEqualsThanNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).resolveBothMathNodes"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).LessOrEqualsThanNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolAndNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).LeftTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolAndNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolAndNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).RightTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolAndNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolAndNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolOrNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).LeftTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolOrNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolOrNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).RightTerm"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolOrNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolOrNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolNegNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.SingleTermNode).Term"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolNegNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).BoolNegNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.DoubleTermNode).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(*text/scanner.Scanner).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "fmt.Sprintf"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.SingleTermNode).Pos"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).Stack"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).ElseNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).ElseNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).IfNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ActionNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.ActionNode).Action"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ActionNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).ActionNode" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ActionNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).ActionNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).Conditions"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ResolveComparisonNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).Stack"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).ElseNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.IfNode).ElseNode"
  "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).IfNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).ActionNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "log.Fatalf"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.Typechecker).QuestionNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.TermNode).Pos"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.Execute).QuestionNode"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.SingleTermNode).Pos"
  "(*reflect.rtype).FieldByName" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByName" -> "(*reflect.structType).Field"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.structType).FieldByName$1"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.rtype).Elem"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.rtype).common"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.rtype).Name"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.structType).Field"
  "(*reflect.structType).FieldByNameFunc" -> "(*reflect.rtype).Kind"
  "(*reflect.structType).FieldByName" -> "(*reflect.structType).FieldByNameFunc"
  "(*reflect.rtype).FieldByName" -> "(*reflect.structType).FieldByName"
  "os.syscallMode" -> "(os.FileMode).Perm"
  "(*os.File).Chmod" -> "os.syscallMode"
  "syscall.Fchmod" -> "syscall.Syscall"
  "(*os.File).Chmod" -> "syscall.Fchmod"
  "(reflect.Value).Call" -> "(reflect.flag).mustBe"
  "(reflect.Value).Call" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).call" -> "reflect.methodReceiver"
  "(*reflect.rtype).NumIn" -> "(*reflect.rtype).Kind"
  "(reflect.Value).call" -> "(*reflect.rtype).NumIn"
  "(*reflect.rtype).IsVariadic" -> "(*reflect.rtype).Kind"
  "(reflect.Value).call" -> "(*reflect.rtype).IsVariadic"
  "(reflect.Value).call" -> "(*reflect.rtype).IsVariadic"
  "(reflect.Value).call" -> "(*reflect.rtype).IsVariadic"
  "(reflect.Value).call" -> "(reflect.Value).Kind"
  "(reflect.Value).call" -> "(reflect.Value).Type"
  "(*reflect.rtype).In" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).In" -> "reflect.toType"
  "(reflect.Value).call" -> "(*reflect.rtype).In"
  "(*reflect.rtype).AssignableTo" -> "reflect.directlyAssignable"
  "(*reflect.rtype).AssignableTo" -> "reflect.implements"
  "(reflect.Value).call" -> "(*reflect.rtype).AssignableTo"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(*reflect.rtype).In"
  "reflect.MakeSlice" -> "(*reflect.rtype).Kind"
  "reflect.MakeSlice" -> "(*reflect.rtype).Elem"
  "reflect.MakeSlice" -> "reflect.unsafe_NewArray"
  "reflect.MakeSlice" -> "(*reflect.rtype).common"
  "(reflect.Value).call" -> "reflect.MakeSlice"
  "(reflect.Value).call" -> "(*reflect.rtype).In"
  "(reflect.Value).call" -> "(*reflect.rtype).Elem"
  "(reflect.Value).call" -> "(*reflect.rtype).NumIn"
  "(reflect.Value).call" -> "(*reflect.rtype).IsVariadic"
  "(reflect.Value).call" -> "(reflect.Value).Type"
  "(reflect.Value).call" -> "(*reflect.rtype).AssignableTo"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(*reflect.rtype).String"
  "(reflect.Value).call" -> "(reflect.Value).Index"
  "(reflect.Value).call" -> "(reflect.Value).Set"
  "(*reflect.rtype).NumOut" -> "(*reflect.rtype).Kind"
  "(reflect.Value).call" -> "(*reflect.rtype).NumOut"
  "(reflect.Value).call" -> "reflect.funcLayout"
  "(reflect.Value).call" -> "reflect.unsafe_New"
  "(reflect.Value).call" -> "reflect.storeRcvr"
  "(reflect.Value).call" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).call" -> "(*reflect.rtype).In"
  "(reflect.Value).call" -> "(reflect.Value).assignTo"
  "(reflect.Value).call" -> "reflect.call"
  "(reflect.Value).call" -> "reflect.memmove"
  "runtime.GC" -> "runtime.gogc"
  "(reflect.Value).call" -> "runtime.GC"
  "(*reflect.rtype).Out" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Out" -> "reflect.toType"
  "(reflect.Value).call" -> "(*reflect.rtype).Out"
  "(reflect.Value).call" -> "(*reflect.rtype).Align"
  "(reflect.Value).call" -> "(*reflect.rtype).Kind"
  "(reflect.Value).call" -> "(*reflect.rtype).common"
  "(reflect.Value).call" -> "(*reflect.rtype).Size"
  "(reflect.Value).Call" -> "(reflect.Value).call"
  "(time.Time).Weekday" -> "(time.Time).abs"
  "(time.Time).Weekday" -> "time.absWeekday"
  "reflect.cvtUintFloat" -> "(reflect.Value).Uint"
  "reflect.cvtUintFloat" -> "reflect.makeFloat"
  "(*fmt.ss).Token" -> "(*fmt.ss).Token$1"
  "(*fmt.ss).skipSpace" -> "(*fmt.ss).getRune"
  "(*fmt.ss).skipSpace" -> "(*fmt.ss).peek"
  "(*fmt.ss).skipSpace" -> "fmt.isSpace"
  "(*fmt.ss).errorString" -> "errors.New"
  "(*fmt.ss).skipSpace" -> "(*fmt.ss).errorString"
  "(*fmt.ss).skipSpace" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).token" -> "(*fmt.ss).skipSpace"
  "(*fmt.ss).token" -> "(*fmt.ss).getRune"
  "(*fmt.ss).token" -> "fmt.notSpace"
  "(*fmt.ss).token" -> "(*fmt.ss).UnreadRune"
  "(*fmt.ss).token" -> "(*fmt.buffer).WriteRune"
  "(*fmt.ss).Token" -> "(*fmt.ss).token"
  "(time.Time).MarshalBinary" -> "(time.Time).Location"
  "(time.Time).Zone" -> "(*time.Location).lookup"
  "(time.Time).MarshalBinary" -> "(time.Time).Zone"
  "(time.Time).MarshalBinary" -> "errors.New"
  "(time.Time).MarshalBinary" -> "errors.New"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "fmt.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "io.init"
  "strings.init" -> "errors.init"
  "strings.init" -> "io.init"
  "strings.init" -> "unicode/utf8.init"
  "strings.init" -> "unicode.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "strings.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "text/scanner.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "strconv.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init"
  "reflect.cvtIntString" -> "(reflect.Value).Int"
  "reflect.makeString" -> "reflect.New"
  "reflect.makeString" -> "(reflect.Value).Elem"
  "(reflect.Value).SetString" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetString" -> "(reflect.flag).mustBe"
  "reflect.makeString" -> "(reflect.Value).SetString"
  "reflect.cvtIntString" -> "reflect.makeString"
  "reflect.makeInt" -> "(*reflect.rtype).common"
  "reflect.makeInt" -> "reflect.unsafe_New"
  "reflect.makeInt" -> "(*reflect.rtype).Kind"
  "(reflect.Value).TrySend" -> "(reflect.flag).mustBe"
  "(reflect.Value).TrySend" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).send" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).send" -> "(reflect.Value).assignTo"
  "(reflect.Value).send" -> "(reflect.Value).pointer"
  "(reflect.Value).send" -> "reflect.chansend"
  "(reflect.Value).TrySend" -> "(reflect.Value).send"
  "(*reflect.rtype).Implements" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Implements" -> "reflect.implements"
  "(*os.File).Chown" -> "syscall.Fchown"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init"
  "log.init" -> "fmt.init"
  "log.init" -> "io.init"
  "log.init" -> "os.init"
  "log.init" -> "runtime.init"
  "log.init" -> "sync.init"
  "log.init" -> "time.init"
  "log.init" -> "log.New"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.init" -> "log.init"
  "(*os.fileStat).IsDir" -> "(*os.fileStat).Mode"
  "(*os.fileStat).IsDir" -> "(os.FileMode).IsDir"
  "syscall.Fchdir" -> "syscall.Syscall"
  "(reflect.Value).setRunes" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).setRunes" -> "(reflect.flag).mustBe"
  "(reflect.Value).setRunes" -> "(*reflect.rtype).Elem"
  "(reflect.Value).setRunes" -> "(*reflect.rtype).Kind"
  "(reflect.Value).OverflowInt" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowInt" -> "(reflect.flag).kind"
  "reflect.cvtFloatUint" -> "(reflect.Value).Float"
  "reflect.cvtFloatUint" -> "reflect.makeInt"
  "(reflect.Value).SetBool" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetBool" -> "(reflect.flag).mustBe"
  "(*strings.Reader).Seek" -> "errors.New"
  "(*strings.Reader).Seek" -> "errors.New"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.init" -> "fmt.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.init" -> "strings.init"
  "github.com/mitchellh/go-wordwrap.init" -> "bytes.init"
  "github.com/mitchellh/go-wordwrap.init" -> "unicode.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.init" -> "github.com/mitchellh/go-wordwrap.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/event.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init" -> "log.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init" -> "fmt.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/event.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init" -> "fmt.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.init"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.init" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.init"
  "(reflect.Value).CallSlice" -> "(reflect.flag).mustBe"
  "(reflect.Value).CallSlice" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).CallSlice" -> "(reflect.Value).call"
  "(reflect.Value).Close" -> "(reflect.flag).mustBe"
  "(reflect.Value).Close" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Close" -> "(reflect.Value).pointer"
  "(reflect.Value).Close" -> "reflect.chanclose"
  "(*bytes.Buffer).UnreadByte" -> "errors.New"
  "(time.Time).GobEncode" -> "(time.Time).MarshalBinary"
  "(reflect.Value).SetCap" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetCap" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetUint" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetUint" -> "(reflect.flag).kind"
  "(reflect.Value).SetUint" -> "(reflect.flag).kind"
  "(reflect.Value).runes" -> "(reflect.flag).mustBe"
  "(reflect.Value).runes" -> "(*reflect.rtype).Elem"
  "(reflect.Value).runes" -> "(*reflect.rtype).Kind"
  "reflect.cvtRunesString" -> "(reflect.Value).runes"
  "reflect.cvtRunesString" -> "reflect.makeString"
  "(*reflect.rtype).FieldByNameFunc" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).FieldByNameFunc" -> "(*reflect.structType).FieldByNameFunc"
  "(time.Time).Day" -> "(time.Time).date"
  "(*bytes.Buffer).ReadBytes" -> "(*bytes.Buffer).readSlice"
  "time.getnum" -> "time.isDigit"
  "time.getnum" -> "time.isDigit"
  "strconv.Unquote" -> "strconv.contains"
  "strconv.Unquote" -> "strconv.contains"
  "strconv.Unquote" -> "strconv.contains"
  "strconv.Unquote" -> "strconv.contains"
  "strconv.Unquote" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "unicode/utf8.DecodeRuneInString"
  "strconv.UnquoteChar" -> "strconv.unhex"
  "strconv.Unquote" -> "strconv.UnquoteChar"
  "strconv.Unquote" -> "unicode/utf8.EncodeRune"
  "time.parse" -> "time.nextStdChunk"
  "time.skip" -> "time.cutspace"
  "time.skip" -> "time.cutspace"
  "time.parse" -> "time.skip"
  "time.atoi" -> "time.leadingInt"
  "time.parse" -> "time.atoi"
  "time.lookup" -> "time.match"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.isDigit"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.lookup"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.getnum"
  "time.parse" -> "time.nextStdChunk"
  "time.parse" -> "time.isDigit"
  "time.parseNanoseconds" -> "time.atoi"
  "time.parse" -> "time.parseNanoseconds"
  "time.parse" -> "time.isDigit"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.atoi"
  "time.parseGMT" -> "time.leadingInt"
  "time.parseTimeZone" -> "time.parseGMT"
  "time.parse" -> "time.parseTimeZone"
  "time.parse" -> "time.parseNanoseconds"
  "time.parse" -> "time.parseNanoseconds"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.norm"
  "time.Date" -> "time.isLeap"
  "time.Date" -> "(*time.Location).lookup"
  "time.Date" -> "(*time.Location).lookup"
  "time.Date" -> "(*time.Location).lookup"
  "time.parse" -> "time.Date"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Location).lookup"
  "time.parse" -> "time.FixedZone"
  "time.parse" -> "time.Date"
  "time.parse" -> "(*time.Location).lookupName"
  "time.parse" -> "time.Date"
  "time.parse" -> "time.atoi"
  "time.parse" -> "time.FixedZone"
  "time.Parse" -> "time.parse"
  "(*time.Time).UnmarshalJSON" -> "time.Parse"
  "reflect.cvtFloatInt" -> "(reflect.Value).Float"
  "reflect.cvtFloatInt" -> "reflect.makeInt"
  "(*fmt.pp).doPrint" -> "(*fmt.fmt).clearflags"
  "(*fmt.pp).doPrint" -> "(*fmt.pp).printArg"
  "(*fmt.pp).doPrint" -> "reflect.TypeOf"
  "(*fmt.pp).doPrint" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).doPrint" -> "(*fmt.buffer).WriteByte"
  "(*fmt.pp).doPrint" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Convert" -> "reflect.makeMethodValue"
  "(reflect.Value).Convert" -> "(*reflect.rtype).common"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "(*reflect.rtype).PkgPath" -> "(*reflect.uncommonType).PkgPath"
  "reflect.convertOp" -> "(*reflect.rtype).PkgPath"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "reflect.convertOp" -> "(*reflect.rtype).PkgPath"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "reflect.implements"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "reflect.convertOp" -> "(*reflect.rtype).common"
  "reflect.convertOp" -> "(*reflect.rtype).Elem"
  "reflect.convertOp" -> "(*reflect.rtype).common"
  "reflect.convertOp" -> "reflect.haveIdenticalUnderlyingType"
  "reflect.convertOp" -> "(*reflect.rtype).Name"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "reflect.convertOp" -> "(*reflect.rtype).Name"
  "reflect.convertOp" -> "(*reflect.rtype).Kind"
  "(reflect.Value).Convert" -> "reflect.convertOp"
  "(reflect.Value).Convert" -> "(*reflect.rtype).String"
  "(reflect.Value).Convert" -> "(*reflect.rtype).String"
  "reflect.cvtInt" -> "(reflect.Value).Int"
  "reflect.cvtInt" -> "reflect.makeInt"
  "(reflect.Value).Convert" -> "reflect.cvtInt"
  "(reflect.Value).Convert" -> "reflect.cvtIntFloat"
  "(reflect.Value).Convert" -> "reflect.cvtIntString"
  "reflect.cvtUint" -> "(reflect.Value).Uint"
  "reflect.cvtUint" -> "reflect.makeInt"
  "(reflect.Value).Convert" -> "reflect.cvtUint"
  "(reflect.Value).Convert" -> "reflect.cvtUintFloat"
  "reflect.cvtUintString" -> "(reflect.Value).Uint"
  "reflect.cvtUintString" -> "reflect.makeString"
  "(reflect.Value).Convert" -> "reflect.cvtUintString"
  "(reflect.Value).Convert" -> "reflect.cvtFloatInt"
  "(reflect.Value).Convert" -> "reflect.cvtFloatUint"
  "reflect.cvtFloat" -> "(reflect.Value).Float"
  "reflect.cvtFloat" -> "reflect.makeFloat"
  "(reflect.Value).Convert" -> "reflect.cvtFloat"
  "reflect.cvtComplex" -> "(reflect.Value).Complex"
  "reflect.cvtComplex" -> "reflect.makeComplex"
  "(reflect.Value).Convert" -> "reflect.cvtComplex"
  "(reflect.Value).Convert" -> "reflect.cvtStringBytes"
  "reflect.cvtStringRunes" -> "(reflect.Value).String"
  "reflect.makeRunes" -> "reflect.New"
  "reflect.makeRunes" -> "(reflect.Value).Elem"
  "reflect.makeRunes" -> "(reflect.Value).setRunes"
  "reflect.cvtStringRunes" -> "reflect.makeRunes"
  "(reflect.Value).Convert" -> "reflect.cvtStringRunes"
  "reflect.cvtBytesString" -> "(reflect.Value).Bytes"
  "reflect.cvtBytesString" -> "reflect.makeString"
  "(reflect.Value).Convert" -> "reflect.cvtBytesString"
  "(reflect.Value).Convert" -> "reflect.cvtRunesString"
  "(reflect.Value).Convert" -> "reflect.cvtDirect"
  "(reflect.Value).Convert" -> "reflect.cvtI2I"
  "(reflect.Value).Convert" -> "reflect.cvtT2I"
  "(time.Time).ISOWeek" -> "(time.Time).date"
  "(time.Time).ISOWeek" -> "(time.Time).Weekday"
  "(time.Time).ISOWeek" -> "time.isLeap"
  "(*strings.Reader).WriteTo" -> "io.WriteString"
  "(time.Time).Hour" -> "(time.Time).abs"
  "(reflect.Value).Cap" -> "(reflect.flag).kind"
  "(reflect.Value).Cap" -> "(*reflect.rtype).Len"
  "(reflect.Value).Cap" -> "(reflect.Value).pointer"
  "(reflect.Value).Cap" -> "reflect.chancap"
  "(reflect.Value).Cap" -> "(reflect.flag).kind"
  "(*text/scanner.Scanner).Next" -> "(*text/scanner.Scanner).Peek"
  "(*text/scanner.Scanner).Next" -> "(*text/scanner.Scanner).next"
  "syscall.Pwrite" -> "syscall.Syscall6"
  "(*os.File).pwrite" -> "syscall.Pwrite"
  "(*os.File).pwrite" -> "os.fixCount"
  "(*os.File).WriteAt" -> "(*os.File).pwrite"
  "fmt.Errorf" -> "fmt.Sprintf"
  "fmt.Errorf" -> "errors.New"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "fmt.Errorf"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Label"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "fmt.Errorf"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Label"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "fmt.Errorf"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Label"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Label"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/ast.QuestionNode).Identifier"
  "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop" -> "fmt.Errorf"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.newSymbolTable" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).loop"
  "(*os.File).Chdir" -> "syscall.Fchdir"
  "(*strings.Reader).ReadAt" -> "errors.New"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Write"
  "(*bytes.Buffer).WriteTo" -> "(*os.File).Write"
  "(*bytes.Buffer).WriteTo" -> "(*bytes.Buffer).Truncate"
  "(*bytes.Buffer).WriteTo" -> "(*fmt.pp).Write"
  "(*bytes.Buffer).WriteTo" -> "(*fmt.buffer).Write"
  "(time.Time).Month" -> "(time.Time).date"
  "(reflect.Value).OverflowUint" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowUint" -> "(reflect.flag).kind"
  "(time.Time).Year" -> "(time.Time).date"
  "(time.Time).MarshalJSON" -> "(time.Time).Year"
  "(time.Time).MarshalJSON" -> "errors.New"
  "(time.Time).MarshalJSON" -> "(time.Time).Format"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "errors.New"
  "(*time.Time).UnmarshalBinary" -> "(*time.Location).lookup"
  "(*time.Time).UnmarshalBinary" -> "time.FixedZone"
  "syscall.Fsync" -> "syscall.Syscall"
  "(*os.File).Sync" -> "syscall.Fsync"
  "(*os.File).Sync" -> "os.NewSyscallError"
  "(reflect.Value).SetComplex" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetComplex" -> "(reflect.flag).kind"
  "(reflect.Value).SetComplex" -> "(reflect.flag).kind"
  "(*os.file).close" -> "syscall.Close"
  "(*os.file).close" -> "runtime.SetFinalizer"
  "(*os.File).Close" -> "(*os.file).close"
  "(reflect.Value).SetLen" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetLen" -> "(reflect.flag).mustBe"
  "(*reflect.rtype).Method" -> "(*reflect.rtype).Kind"
  "(*reflect.rtype).Method" -> "(*reflect.interfaceType).Method"
  "(*reflect.rtype).Method" -> "(*reflect.uncommonType).Method"
  "(*bytes.Buffer).Grow" -> "(*bytes.Buffer).grow"
  "fmt.Sprintln" -> "fmt.newPrinter"
  "fmt.Sprintln" -> "(*fmt.pp).doPrint"
  "fmt.Sprintln" -> "(*fmt.pp).free"
  "(*strings.Reader).UnreadByte" -> "errors.New"
  "(*os.File).pread" -> "syscall.Pread"
  "(*os.File).pread" -> "os.fixCount"
  "(*fmt.ss).SkipSpace" -> "(*fmt.ss).skipSpace"
  "(reflect.Value).SetFloat" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetFloat" -> "(reflect.flag).kind"
  "(reflect.Value).SetFloat" -> "(reflect.flag).kind"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Kind"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Field"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).IsNil"
  "(reflect.Value).FieldByIndex" -> "(*reflect.rtype).Elem"
  "(reflect.Value).FieldByIndex" -> "(*reflect.rtype).Kind"
  "(reflect.Value).FieldByIndex" -> "(reflect.Value).Elem"
  "(*time.Time).GobDecode" -> "(*time.Time).UnmarshalBinary"
  "unicode.IsSpace" -> "unicode.isExcludingLatin"
  "(*bytes.Buffer).ReadByte" -> "(*bytes.Buffer).Truncate"
  "(reflect.Value).Addr" -> "(*reflect.rtype).ptrTo"
  "(reflect.Value).FieldByName" -> "(reflect.flag).mustBe"
  "(reflect.Value).FieldByName" -> "(*reflect.rtype).FieldByName"
  "(reflect.Value).FieldByName" -> "(reflect.Value).FieldByIndex"
  "syscall.Ftruncate" -> "syscall.Syscall"
  "fmt.Fprintln" -> "fmt.newPrinter"
  "fmt.Fprintln" -> "(*fmt.pp).doPrint"
  "fmt.Fprintln" -> "(*bytes.Buffer).Write"
  "fmt.Fprintln" -> "(*os.File).Write"
  "fmt.Fprintln" -> "(*fmt.pp).free"
  "fmt.Fprintln" -> "(*fmt.pp).Write"
  "fmt.Fprintln" -> "(*fmt.buffer).Write"
  "(*reflect.rtype).ConvertibleTo" -> "reflect.convertOp"
  "(reflect.Value).Slice3" -> "(reflect.flag).kind"
  "(reflect.Value).Slice3" -> "(reflect.flag).kind"
  "(reflect.Value).Slice3" -> "(*reflect.rtype).Size"
  "(reflect.Value).Slice3" -> "(*reflect.rtype).common"
  "(reflect.Value).InterfaceData" -> "(reflect.flag).mustBe"
  "(*time.Time).UnmarshalText" -> "time.Parse"
  "(*bytes.Buffer).ReadString" -> "(*bytes.Buffer).readSlice"
  "(time.Time).AddDate" -> "(time.Time).Date"
  "(time.Time).AddDate" -> "(time.Time).Clock"
  "(time.Time).AddDate" -> "time.Date"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "strings.NewReader"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/parser.ReadQL"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.newSymbolTable"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New$1"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/execute.NewExecute"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.NewVisitor"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.New"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "(*github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor.Visitor).Visit"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "(github.com/software-engineering-amsterdam/many-ql/carlos.cirello/interpreter/visitor/typechecker.SymbolTable).Err"
  "fmt.Println" -> "fmt.Fprintln"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "fmt.Println"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "fmt.Sprintln"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "bytes.NewBuffer"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "unicode.IsSpace"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).String"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).Len"
  "(*bytes.Buffer).WriteByte" -> "(*bytes.Buffer).grow"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).WriteByte"
  "(*bytes.Buffer).WriteRune" -> "unicode/utf8.EncodeRune"
  "(*bytes.Buffer).WriteRune" -> "(*bytes.Buffer).Write"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).WriteRune"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).Reset"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).WriteRune"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).Len"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).WriteTo"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).WriteRune"
  "github.com/mitchellh/go-wordwrap.WrapString" -> "(*bytes.Buffer).Len"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "github.com/mitchellh/go-wordwrap.WrapString"
  "github.com/software-engineering-amsterdam/many-ql/carlos.cirello/doc.main" -> "fmt.Println"
  "(reflect.StructTag).Get" -> "strconv.Unquote"
  "(*os.File).Truncate" -> "syscall.Ftruncate"
  "(reflect.Value).Send" -> "(reflect.flag).mustBe"
  "(reflect.Value).Send" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).Send" -> "(reflect.Value).send"
  "(*os.File).ReadAt" -> "(*os.File).pread"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBe"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).SetMapIndex" -> "reflect.mapdelete"
  "(reflect.Value).SetMapIndex" -> "(reflect.flag).mustBeExported"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).assignTo"
  "(reflect.Value).SetMapIndex" -> "(reflect.Value).pointer"
  "(reflect.Value).SetMapIndex" -> "reflect.mapassign"
  "(time.Time).Sub" -> "(time.Time).Add"
  "(time.Time).Sub" -> "(time.Time).Equal"
  "(time.Time).Sub" -> "(time.Time).Before"
  "(time.Time).MarshalText" -> "(time.Time).Year"
  "(time.Time).MarshalText" -> "errors.New"
  "(time.Time).MarshalText" -> "(time.Time).Format"
  "(time.Time).Round" -> "time.div"
  "(time.Time).Round" -> "(time.Time).Add"
  "(time.Time).Round" -> "(time.Time).Add"
  "(reflect.Value).FieldByNameFunc" -> "(*reflect.rtype).FieldByNameFunc"
  "(reflect.Value).FieldByNameFunc" -> "(reflect.Value).FieldByIndex"
  "(time.Time).Truncate" -> "time.div"
  "(time.Time).Truncate" -> "(time.Time).Add"
  "(reflect.Value).SetPointer" -> "(reflect.flag).mustBeAssignable"
  "(reflect.Value).SetPointer" -> "(reflect.flag).mustBe"
  "(*os.File).Seek" -> "(*os.File).seek"
  "(reflect.Value).OverflowComplex" -> "(reflect.flag).kind"
  "(reflect.Value).OverflowComplex" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowComplex" -> "reflect.overflowFloat32"
  "(reflect.Value).OverflowComplex" -> "(reflect.flag).kind"
}
