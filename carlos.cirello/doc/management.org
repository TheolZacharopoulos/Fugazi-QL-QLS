* Relevant Content
  {1} Grammar parser genenetaror for Go [[https://golang.org/cmd/yacc/]] [[http://www.vitanuova.com/inferno/man/1/yacc.html]]
  {2} Assignment [[https://github.com/software-engineering-amsterdam/software-construction/tree/master/2014-2015#ql-requirements]]
  {3} Syllabus [[https://github.com/software-engineering-amsterdam/software-construction/blob/master/2014-2015/Syllabus.md]]
  {4} Lex and Yacc in Go - implemented [[https://github.com/noypi/schedparser]]
  {5} QL longer spec [[http://www.languageworkbenches.net/wp-content/uploads/2013/11/Ql.pdf]]
  {6} On Why you should not use Visitor Pattern in Go [[https://groups.google.com/d/msg/golang-nuts/3fOIZ1VLn1o/GeE1z5qUA6YJ]] [[https://groups.google.com/d/msg/golang-nuts/3fOIZ1VLn1o/u5rCkpGhhscJ]]

* QualityWithoutAName Cards
  - [ ] backlog [0/3]
    - [ ] get rid of switch statements
    - [ ] magic constants
    - [ ] duplicated code

* QL [6/7]
  - [ ] Refactor [1/3]
    - [ ] Refactor Bool nodes into Visitor
    - [ ] Refactor Math nodes into Visitor
    - [X] Extract question typing from AST
  - [X] Basic Architecture
  - [X] Interpreter wise error handling
    - [X] Pretty and informing error message
  - [X] Resolve the Visitor debate. {6}
    - [ ] Review Visitor debate - consider Tijs may not "like" it.
  - [X] Compiler [2/2] {1}
    - [X] Write grammar [8/8]
      - [X] form parsing :MUST:
      - [X] question parsing :MUST:
      - [X] add support for comment :MUST:
      - [X] add type checking for question types (int, str, bool) :MUST:
        - [X] Simplify grammar :MUST:
      - [X] Treat against invalid variable types
        - [X] Is this a grammar level error? Not likely.
      - [X] conditional question :MUST:
      - [X] default value for questions :MUST:
      - [X] math evaluation for IF and default values :MUST:
        - [X] Protect against undeclared and empty values :MUST:
        - [X] Support for (...) blocks
    - [X] Generate AST [3/3]
      - [X] Basic cases
      - [X] Advanced cases [5/5]
        - [X] IF positive
        - [X] IF-Else
        - [X] IF-Else+If-Else
        - [X] Expressions
          - [X] 1 + true
        - [X] Treat nodes as Immutable Value Objects(?) :COULD:
      - [X] All cases
        - [X] Double declaration
  - [X] Frontend Interface [2/2]
    - [X] Concurrent Interface between Frontends and VM
    - [X] GUI Frontend [6/6]
      - [X] Basic cases
      - [X] Questions shuffled when toggling visibility :BUG:
      - [X] Fix the concertina effect :BUG:
      - [X] Advanced cases
      - [X] All cases
      - [X] Transpose restrictions from the dependency into the main doc.
  - [X] Preload answers from CSV file
  ** Functionalities [10/10] {2}
    - [X] The language supports: [4/4]
      - [X] Bool [2/2]
        - [X] Basic Algorithm
        - [X] Initial Tests
      - [X] Int [2/3]
        - [X] Basic Algorithm
        - [X] Initial Tests
      - [X] String [2/3]
        - [X] Basic Algorithm
        - [X] Initial Tests
      - [X] Computed Questions
        - [X] Avoid recursion within the expression
        - [X] Avoid recursion between computed questions
    - [X] Questions are enabled and disabled when different values are entered.
    - [X] Type Checker: reference to undefined questions
    - [X] Type Checker: duplicate question declarations with different types
    - [X] Type Checker: conditions that are not of the type boolean
    - [X] Type Checker: operands of invalid type to operators
    - [X] Type Checker: references to questions with an undefined value
    - [X] Type Checker: cyclic dependencies between questions
    - [X] Type Checker: duplicate labels (warning)
    - [X] Different data types in QL map to different (default) GUI widgets.

  ** Requirements on the implementation [4/4] {2}
    - [X] The parser of the DSL is implemented using a grammar-based parser generator.
    - [X] The internal structure of a DSL program is represented using abstract syntax trees.
    - [X] QL programs are executed as GUI programs, not command-line dialogues.
    - [X] QL programs are executed by interpretation, not code generation.
