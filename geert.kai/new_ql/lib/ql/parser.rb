#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module QL
  class Parser < Racc::Parser


  require_relative 'form'

  def initialize tokenizer
    @tokenizer = tokenizer
    super()
  end

  def next_token
    @tokenizer.next_token
  end

  def parse
    do_parse
  end
##### State transition tables begin ###

racc_action_table = [
    17,    17,    17,    32,    17,    23,    17,    35,    16,    16,
    16,    33,    16,    17,    16,     4,    18,    25,    22,     3,
    30,    16,    27,    28,    29,    21,     8,     7,     3 ]

racc_action_check = [
    31,    33,    30,    31,    34,    20,     6,    34,    31,    33,
    30,    31,    34,     9,     6,     1,     9,    22,    16,     1,
    24,     9,    23,    23,    23,    13,     4,     3,     0 ]

racc_action_pointer = [
    24,    15,   nil,    24,    26,   nil,     4,   nil,   nil,    11,
   nil,   nil,   nil,    22,   nil,   nil,     7,   nil,   nil,   nil,
    -1,   nil,    14,    15,     8,   nil,   nil,   nil,   nil,   nil,
     0,    -2,   nil,    -1,     2,   nil ]

racc_action_default = [
   -20,   -20,    -2,   -20,   -20,    -1,   -20,    -4,    36,   -20,
    -6,    -7,    -8,   -20,   -14,   -15,   -20,   -19,    -3,    -5,
   -20,   -10,   -20,   -20,   -20,   -18,    -9,   -11,   -12,   -13,
   -20,   -20,   -16,   -20,   -20,   -17 ]

racc_goto_table = [
     9,    19,     2,     5,     1,     6,    20,    26,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,    31,   nil,    19,    34 ]

racc_goto_check = [
     4,     5,     2,     2,     1,     3,     9,    10,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,     4,   nil,     5,     4 ]

racc_goto_pointer = [
   nil,     4,     2,     2,    -6,    -8,   nil,   nil,   nil,    -7,
   -16,   nil,   nil,   -14 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    10,    11,    12,    13,   nil,
   nil,    14,    15,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 15, :_reduce_1,
  1, 15, :_reduce_2,
  4, 16, :_reduce_3,
  1, 17, :_reduce_none,
  2, 18, :_reduce_5,
  1, 18, :_reduce_6,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  4, 20, :_reduce_9,
  1, 23, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  6, 25, :_reduce_16,
  8, 26, :_reduce_17,
  1, 27, :_reduce_none,
  1, 22, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :VARIABLE_NAME => 3,
  "form" => 4,
  "end" => 5,
  ":" => 6,
  "boolean" => 7,
  "integer" => 8,
  "string" => 9,
  "if" => 10,
  "(" => 11,
  ")" => 12,
  "else" => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "VARIABLE_NAME",
  "\"form\"",
  "\"end\"",
  "\":\"",
  "\"boolean\"",
  "\"integer\"",
  "\"string\"",
  "\"if\"",
  "\"(\"",
  "\")\"",
  "\"else\"",
  "$start",
  "forms",
  "form",
  "form_name",
  "statements",
  "statement",
  "question",
  "conditional",
  "string",
  "variable_name",
  "type",
  "if",
  "if_else",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = [ val[1] ] + val[0] 
    result
end

def _reduce_2(val, _values, result)
 result = [ val[0] ] 
    result
end

def _reduce_3(val, _values, result)
 result = Form.new(name: val[1], statements: val[2]) 
    result
end

# reduce 4 omitted

def _reduce_5(val, _values, result)
 result = [ val[1] ] + val[0] 
    result
end

def _reduce_6(val, _values, result)
 result = [ val[0] ] 
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
 result = Question.new(description: val[0], variable_name: val[1], type: val[3]) 
    result
end

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

def _reduce_16(val, _values, result)
 result = If.new(expression: val[2], statements: val[4]) 
    result
end

def _reduce_17(val, _values, result)
 result = IfElse.new(expression: val[2], statements_true: val[4], statements_false: val[6]) 
    result
end

# reduce 18 omitted

def _reduce_19(val, _values, result)
 result = val[0][1..-2] 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module QL
