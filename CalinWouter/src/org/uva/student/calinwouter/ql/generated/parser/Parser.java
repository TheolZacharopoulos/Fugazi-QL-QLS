/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.uva.student.calinwouter.ql.generated.parser;

import org.uva.student.calinwouter.ql.generated.lexer.*;
import org.uva.student.calinwouter.ql.generated.node.*;
import org.uva.student.calinwouter.ql.generated.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PForm node1 = (PForm) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AForm */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ASingleStmtlist */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AMultiStmtlist */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ABoolType */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AStringType */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AIntType */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AQuestionStmt */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AValueStmt */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIfelseStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AIfStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AAddExp */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ASubExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ACmpExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce ALogicalExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AEqCmp */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ANeqCmp */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ALtCmp */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AGtCmp */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ALteCmp */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce AGteCmp */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AOrLogical */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list);
            }
            break;
            case 21: /* reduce AAndLogical */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list);
            }
            break;
            case 22: /* reduce AFactorLogical */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce AMulFactor */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AModFactor */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AUnaryFactor */
            {
                ArrayList<Object> list = new26();
                push(goTo(7), list);
            }
            break;
            case 27: /* reduce ANotUnary */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce ANumberUnary */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce ATrueUnary */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list);
            }
            break;
            case 30: /* reduce AFalseUnary */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce AParenUnary */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AForm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        TIdent tidentNode2;
        PStmtlist pstmtlistNode3;
        tidentNode2 = (TIdent)nodeArrayList2.get(0);
        pstmtlistNode3 = (PStmtlist)nodeArrayList4.get(0);

        pformNode1 = new AForm(tidentNode2, pstmtlistNode3);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASingleStmtlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtlist pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pstmtlistNode1 = new ASingleStmtlist(pstmtNode2);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultiStmtlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtlist pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        PStmt pstmtNode3;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtNode3 = (PStmt)nodeArrayList2.get(0);

        pstmtlistNode1 = new AMultiStmtlist(pstmtNode2, pstmtNode3);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AStringType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AQuestionStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TString tstringNode2;
        PType ptypeNode3;
        tstringNode2 = (TString)nodeArrayList3.get(0);
        ptypeNode3 = (PType)nodeArrayList4.get(0);

        pstmtNode1 = new AQuestionStmt(tstringNode2, ptypeNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AValueStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PType ptypeNode2;
        PExp pexpNode3;
        ptypeNode2 = (PType)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);

        pstmtNode1 = new AValueStmt(ptypeNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIfelseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmtlist pstmtlistNode3;
        PStmtlist pstmtlistNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtlistNode3 = (PStmtlist)nodeArrayList6.get(0);
        pstmtlistNode4 = (PStmtlist)nodeArrayList10.get(0);

        pstmtNode1 = new AIfelseStmt(pexpNode2, pstmtlistNode3, pstmtlistNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmtlist pstmtlistNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmtlistNode3 = (PStmtlist)nodeArrayList6.get(0);

        pstmtNode1 = new AIfStmt(pexpNode2, pstmtlistNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAddExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAddExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASubExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACmpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ALogicalExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AEqCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANeqCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ALtCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AGtCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ALteCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALteExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AGteCmp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGteExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AOrLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAndLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFactorLogical */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMulFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMulExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AUnaryFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANotUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANumberUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpNode1 = new ANumberExp(tnumberNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATrueUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AFalseUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AParenUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AParenExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {12, SHIFT, 1}, },
			{{-1, ERROR, 1}, {2, SHIFT, 3}, },
			{{-1, ERROR, 2}, {30, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {13, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {16, SHIFT, 6}, },
			{{-1, ERROR, 5}, {15, SHIFT, 9}, },
			{{-1, ERROR, 6}, {10, SHIFT, 10}, },
			{{-1, ERROR, 7}, {14, SHIFT, 11}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 5}, {16, SHIFT, 6}, },
			{{-1, ERROR, 9}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {23, SHIFT, 16}, },
			{{-1, ERROR, 10}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 16}, {18, SHIFT, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, },
			{{-1, ERROR, 17}, {10, SHIFT, 29}, },
			{{-1, ERROR, 18}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 20}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 23}, {5, SHIFT, 32}, {6, SHIFT, 33}, {11, SHIFT, 34}, },
			{{-1, REDUCE, 12}, {24, SHIFT, 35}, {25, SHIFT, 36}, {26, SHIFT, 37}, {27, SHIFT, 38}, {28, SHIFT, 39}, {29, SHIFT, 40}, },
			{{-1, REDUCE, 13}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 22}, {7, SHIFT, 43}, {8, SHIFT, 44}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 29}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 31}, {5, SHIFT, 32}, {6, SHIFT, 33}, {11, SHIFT, 47}, },
			{{-1, ERROR, 32}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 33}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 34}, {13, SHIFT, 50}, },
			{{-1, ERROR, 35}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 36}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 37}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 38}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 39}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 40}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 41}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 42}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 43}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 44}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 45}, {0, SHIFT, 18}, {1, SHIFT, 19}, {10, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, },
			{{-1, ERROR, 46}, {5, SHIFT, 32}, {6, SHIFT, 33}, {11, SHIFT, 62}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 43}, {8, SHIFT, 44}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 11}, {7, SHIFT, 43}, {8, SHIFT, 44}, {9, SHIFT, 45}, },
			{{-1, ERROR, 50}, {2, SHIFT, 5}, {16, SHIFT, 6}, },
			{{-1, REDUCE, 14}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 15}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 16}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 17}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 18}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 19}, {3, SHIFT, 41}, {4, SHIFT, 42}, },
			{{-1, REDUCE, 20}, {7, SHIFT, 43}, {8, SHIFT, 44}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 21}, {7, SHIFT, 43}, {8, SHIFT, 44}, {9, SHIFT, 45}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 63}, {14, SHIFT, 64}, },
			{{-1, REDUCE, 9}, {17, SHIFT, 65}, },
			{{-1, ERROR, 65}, {13, SHIFT, 66}, },
			{{-1, ERROR, 66}, {2, SHIFT, 5}, {16, SHIFT, 6}, },
			{{-1, ERROR, 67}, {14, SHIFT, 68}, },
			{{-1, REDUCE, 8}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {50, 63}, {66, 67}, },
			{{-1, 17}, {16, 28}, },
			{{-1, 8}, {8, 12}, },
			{{-1, 23}, {20, 31}, {29, 46}, },
			{{-1, 24}, },
			{{-1, 25}, {35, 51}, {36, 52}, {37, 53}, {38, 54}, {39, 55}, {40, 56}, },
			{{-1, 26}, {32, 48}, {33, 49}, {41, 57}, {42, 58}, },
			{{-1, 27}, {18, 30}, {43, 59}, {44, 60}, {45, 61}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'form'",
			"expecting: ident",
			"expecting: EOF",
			"expecting: '{'",
			"expecting: ident, 'if'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: '}'",
			"expecting: ident, '}', 'if'",
			"expecting: 'boolean', 'string', 'int', string",
			"expecting: '!', number, '(', 'true', 'false'",
			"expecting: ident, '(', '}', 'if'",
			"expecting: 'boolean', 'string', 'int'",
			"expecting: '||', '&&', '+', '-', '*', '/', '%', ')', '==', '!=', '<', '>', '<=', '>='",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', '==', '!=', '<', '>', '<=', '>='",
			"expecting: '||', '&&', '+', '-', ')'",
			"expecting: '+', '-', '*', '/', '%', ')'",
			"expecting: '||', '&&', '+', '-', ')', '==', '!=', '<', '>', '<=', '>='",
			"expecting: ident, '}', 'if', 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 7, 11, 11, 11, 12, 6, 10, 13, 10, 13, 13, 14, 15, 16, 13, 13, 8, 10, 13, 14, 10, 10, 3, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 14, 13, 17, 17, 4, 18, 18, 18, 18, 18, 18, 13, 13, 13, 13, 13, 8, 7, 19, 3, 4, 7, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
