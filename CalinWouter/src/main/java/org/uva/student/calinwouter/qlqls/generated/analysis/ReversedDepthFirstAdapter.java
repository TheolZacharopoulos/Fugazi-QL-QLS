/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.uva.student.calinwouter.qlqls.generated.analysis;

import java.util.*;
import org.uva.student.calinwouter.qlqls.generated.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPBegin().apply(this);
        outStart(node);
    }

    public void inAFormBegin(AFormBegin node)
    {
        defaultIn(node);
    }

    public void outAFormBegin(AFormBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormBegin(AFormBegin node)
    {
        inAFormBegin(node);
        if(node.getForm() != null)
        {
            node.getForm().apply(this);
        }
        outAFormBegin(node);
    }

    public void inAStylesheetBegin(AStylesheetBegin node)
    {
        defaultIn(node);
    }

    public void outAStylesheetBegin(AStylesheetBegin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStylesheetBegin(AStylesheetBegin node)
    {
        inAStylesheetBegin(node);
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        outAStylesheetBegin(node);
    }

    public void inAForm(AForm node)
    {
        defaultIn(node);
    }

    public void outAForm(AForm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForm(AForm node)
    {
        inAForm(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAForm(node);
    }

    public void inAQuestionStmt(AQuestionStmt node)
    {
        defaultIn(node);
    }

    public void outAQuestionStmt(AQuestionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQuestionStmt(AQuestionStmt node)
    {
        inAQuestionStmt(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAQuestionStmt(node);
    }

    public void inAValueStmt(AValueStmt node)
    {
        defaultIn(node);
    }

    public void outAValueStmt(AValueStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueStmt(AValueStmt node)
    {
        inAValueStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAValueStmt(node);
    }

    public void inAIfelseStmt(AIfelseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmt(AIfelseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseStmt(AIfelseStmt node)
    {
        inAIfelseStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getElseStmtList());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getThenStmtList());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIfelseStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getThenStmtList());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIfStmt(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        outABoolType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        outAStringType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        outAIntType(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        outAFalseExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqExp(node);
    }

    public void inANeqExp(ANeqExp node)
    {
        defaultIn(node);
    }

    public void outANeqExp(ANeqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExp(ANeqExp node)
    {
        inANeqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANeqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtExp(node);
    }

    public void inALteExp(ALteExp node)
    {
        defaultIn(node);
    }

    public void outALteExp(ALteExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteExp(ALteExp node)
    {
        inALteExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALteExp(node);
    }

    public void inAGteExp(AGteExp node)
    {
        defaultIn(node);
    }

    public void outAGteExp(AGteExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteExp(AGteExp node)
    {
        inAGteExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGteExp(node);
    }

    public void inAMulExp(AMulExp node)
    {
        defaultIn(node);
    }

    public void outAMulExp(AMulExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExp(AMulExp node)
    {
        inAMulExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMulExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inANumberExp(ANumberExp node)
    {
        defaultIn(node);
    }

    public void outANumberExp(ANumberExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExp(ANumberExp node)
    {
        inANumberExp(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExp(node);
    }

    public void inAIdentExp(AIdentExp node)
    {
        defaultIn(node);
    }

    public void outAIdentExp(AIdentExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentExp(AIdentExp node)
    {
        inAIdentExp(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentExp(node);
    }

    public void inAEmptyIdentList(AEmptyIdentList node)
    {
        defaultIn(node);
    }

    public void outAEmptyIdentList(AEmptyIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyIdentList(AEmptyIdentList node)
    {
        inAEmptyIdentList(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAEmptyIdentList(node);
    }

    public void inAFilledIdentList(AFilledIdentList node)
    {
        defaultIn(node);
    }

    public void outAFilledIdentList(AFilledIdentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilledIdentList(AFilledIdentList node)
    {
        inAFilledIdentList(node);
        {
            List<PElement> copy = new ArrayList<PElement>(node.getElement());
            Collections.reverse(copy);
            for(PElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAFilledIdentList(node);
    }

    public void inATypeElement(ATypeElement node)
    {
        defaultIn(node);
    }

    public void outATypeElement(ATypeElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeElement(ATypeElement node)
    {
        inATypeElement(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeElement(node);
    }

    public void inAIdentElement(AIdentElement node)
    {
        defaultIn(node);
    }

    public void outAIdentElement(AIdentElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentElement(AIdentElement node)
    {
        inAIdentElement(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentElement(node);
    }

    public void inAHexElement(AHexElement node)
    {
        defaultIn(node);
    }

    public void outAHexElement(AHexElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexElement(AHexElement node)
    {
        inAHexElement(node);
        if(node.getHex() != null)
        {
            node.getHex().apply(this);
        }
        outAHexElement(node);
    }

    public void inAStringElement(AStringElement node)
    {
        defaultIn(node);
    }

    public void outAStringElement(AStringElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringElement(AStringElement node)
    {
        inAStringElement(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringElement(node);
    }

    public void inANumberElement(ANumberElement node)
    {
        defaultIn(node);
    }

    public void outANumberElement(ANumberElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberElement(ANumberElement node)
    {
        inANumberElement(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberElement(node);
    }

    public void inAObjectElement(AObjectElement node)
    {
        defaultIn(node);
    }

    public void outAObjectElement(AObjectElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectElement(AObjectElement node)
    {
        inAObjectElement(node);
        {
            List<PObjectEl> copy = new ArrayList<PObjectEl>(node.getObjectEl());
            Collections.reverse(copy);
            for(PObjectEl e : copy)
            {
                e.apply(this);
            }
        }
        outAObjectElement(node);
    }

    public void inAListElement(AListElement node)
    {
        defaultIn(node);
    }

    public void outAListElement(AListElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListElement(AListElement node)
    {
        inAListElement(node);
        if(node.getIdentList() != null)
        {
            node.getIdentList().apply(this);
        }
        outAListElement(node);
    }

    public void inAObjectEl(AObjectEl node)
    {
        defaultIn(node);
    }

    public void outAObjectEl(AObjectEl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectEl(AObjectEl node)
    {
        inAObjectEl(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getKey() != null)
        {
            node.getKey().apply(this);
        }
        outAObjectEl(node);
    }
}
