// Used the skeleton of: http://improve.dk/writing-a-calculator-in-csharp-using-sablecc/
Package QL;

Helpers
	digit	= ['0' .. '9'];
	letter	= [['a' .. 'z'] + ['A' .. 'Z']];
	any	= [#0000 .. #FFFF];
	cr	= #13;
	lr	= #10;
	eol	= cr | lf | cr lf;

Tokens
	number	= (digit+ | digit+ '.' digit+);
	ident	= (letter (digit | letter)*);
	add	= '+';
	sub	= '-';
	mul	= '*';
	div	= '/';
	mod	= '%';
	sqrt	= 'sqrt';
	cos	= 'cos';
	sin	= 'sin';
	lparen	= '(';
	rparen	= ')';
	tform	= 'form';
	lbrace	= '{';
	rbrace	= '}';
	colon	= ':';
	if	= 'if';
	tbool	= 'boolean';
	true	= 'true';
	false	= 'false';
	tstring	= 'string';
	tint	= 'int';
	string	= '"' (any - ('"' | cr | lf))* '"';
	teq	= '==';
	tneq	= '!=';
	tlt	= '<';
	tgt	= '>';
	tlte	= '<=';
	tgte	= '>=';
	comment = '//' (any - (cr | lf))* eol?;
	blank	= (' ' | eol)+;

Ignored

	comment, blank;

Productions	
	form
		= tform ident lbrace stmt_list rbrace
		;

	stmt_list
		= {single}	stmt
		| {multi}	stmt [tail]:stmt_list
		;

	type
		= {bool}	tbool
		| {string}	tstring
		| {int}		tint
		;

	stmt
		= {question}	ident colon string type
		| {value}	ident colon type lparen exp rparen
		| {ifelse}	if lparen exp rparen lbrace stmt_list rbrace else stmt
		| {if}		if lparen exp rparen lbrace stmt_list rbrace
		;
	
	exp {-> exp}
		= {add}		[left]:exp add [right]:factor		{-> New exp.add(left, right.exp)}
		| {sub}		[left]:exp sub [right]:factor		{-> New exp.sub(left, right.exp)}
		| {factor}	factor					{-> factor.exp}
		| {cmp}		cmp					{-> cmp.exp}
		;

	cmp {-> exp}
		= {eq}		[left]:cmp teq [right]:factor		{-> New exp.eq(left.exp, right.exp)}
		| {neq}		[left]:cmp tneq [right]:factor		{-> New exp.neq(left.exp, right.exp)}
		| {lt}		[left]:cmp tlt [right]:factor		{-> New exp.lt(left.exp, right.exp)}
		| {gt}		[left]:cmp tgt [right]:factor		{-> New exp.gt(left.exp, right.exp)}
		| {lte}		[left]:cmp tlte [right]:factor		{-> New exp.lte(left.exp, right.exp)}
		| {gte}		[left]:cmp tgte [right]:factor		{-> New exp.gte(left.exp, right.exp)}
		;
		
	factor {-> exp}
		= {mul}		[left]:factor mul [right]:unary		{-> New exp.mul(left.exp, right.exp)}
		| {div}		[left]:factor div [right]:unary		{-> New exp.div(left.exp, right.exp)}
		| {mod}		[left]:factor mod [right]:unary		{-> New exp.mod(left.exp, right.exp)}
		| {unary}	unary					{-> unary.exp}
		;
		
	unary {-> exp}
		= {number}	number					{-> New exp.number(number)}
		| {true}	true
		| {false}	false
		| {sqrt}	sqrt lparen exp rparen			{-> New exp.sqrt(exp)}
		| {cos}		cos lparen exp rparen			{-> New exp.cos(exp)}
		| {sin}		sin lparen exp rparen			{-> New exp.sin(exp)}
		| {paren}	lparen exp rparen			{-> New exp.paren(exp)}
		;
		
	exp_list {-> exp*}
		= {single}	exp					{-> [exp.exp]}
		| {multi}	exp [tail]:exp_list			{-> [exp.exp, tail.exp]}
		;
		
Abstract Syntax Tree
	exp
		= {add}			[left]:exp [right]:exp
		| {sub}			[left]:exp [right]:exp
		| {mul}			[left]:exp [right]:exp
		| {div}			[left]:exp [right]:exp
		| {mod}			[left]:exp [right]:exp
		| {paren}		exp
		| {sqrt}		exp
		| {cos}			exp
		| {sin}			exp
		| {number}		number
		;
